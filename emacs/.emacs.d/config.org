#+STARTUP: overview
#+TITLE: Felipe's emacs configuration
#+CREATOR: Felipe

* My stuff
** Switch to buffer
   #+BEGIN_SRC emacs-lisp
   (defun felipe/switch-to-buffer (buffer)
     "Switch to a buffer but doesn't open a new window if it's already open in another one."
     (let (result)
       (progn
         (dolist (window (window-list) result)
           (when (equal buffer (window-buffer window))
             (progn
               (select-window window)
               (setq result t))))
         (when (not result) (switch-to-buffer buffer)))))
   #+END_SRC
** Toggle dark theme
   #+BEGIN_SRC emacs-lisp
   (setq felipe/dark-theme t)

   (defun felipe/toggle-dark-theme ()
     "Toggle between light and dark themes."
     (interactive)
     (if felipe/dark-theme
         (progn
           (load-theme 'kaolin-light t)
           (setq felipe/dark-theme nil))
       (progn
         (load-theme 'kaolin-dark t)
         (setq felipe/dark-theme t))))
   #+END_SRC
** User buffer switching
   #+BEGIN_SRC emacs-lisp
   (defun felipe/user-buffer-q ()
     "Return t if current buffer is a user buffer, else nil.
     Typically, if buffer name starts with *, it's not considered a user buffer.
     This function is used by buffer switching command and close buffer command, so that next buffer shown is a user buffer.
     You can override this function to get your idea of 'user buffer'."
     (interactive)
     (not (or (string-equal "*" (substring (buffer-name) 0 1))
              (string-equal major-mode "dired-mode")
              (string-prefix-p "magit" (buffer-name)))))

   (defun felipe/next-user-buffer ()
     "Switch to the next user buffer.
     'user buffer' is determined by 'xah-user-buffer-q'."
     (interactive)
     (next-buffer)
     (let ((i 0))
       (while (< i 20)
         (if (not (felipe/user-buffer-q))
             (progn (next-buffer)
                    (setq i (1+ i)))
           (progn (setq i 100))))))

   (defun felipe/previous-user-buffer ()
     "Switch to the previous user buffer.
     'user buffer' is determined by 'xah-user-buffer-q'."
     (interactive)
     (previous-buffer)
     (let ((i 0))
       (while (< i 20)
         (if (not (felipe/user-buffer-q))
             (progn (previous-buffer)
                    (setq i (1+ i)))
           (progn (setq i 100))))))
   #+END_SRC
* Evil
** Evil mode
  #+BEGIN_SRC emacs-lisp
  (use-package evil
    :ensure t
    :init
    (setq evil-want-integration t
          evil-want-keybinding nil)
    :config
    (evil-mode 1)

    ;; :W to save buffer
    (eval-after-load 'evil-ex
       '(evil-ex-define-cmd "W[rite]" 'evil-write))

    (define-key evil-normal-state-map (kbd "C-h") 'evil-window-left)
    (define-key evil-normal-state-map (kbd "C-j") 'evil-window-down)
    (define-key evil-normal-state-map (kbd "C-k") 'evil-window-up)
    (define-key evil-normal-state-map (kbd "C-l") 'evil-window-right)

    ;; Overload shifts so that they don't lose the selection
    (defun felipe/evil-shift-left-visual ()
      (interactive)
      (evil-shift-left (region-beginning) (region-end))
      (evil-normal-state)
      (evil-visual-restore))

    (defun felipe/evil-shift-right-visual ()
      (interactive)
      (evil-shift-right (region-beginning) (region-end))
      (evil-normal-state)
      (evil-visual-restore))

    (define-key evil-visual-state-map (kbd ">") 'felipe/evil-shift-right-visual)
    (define-key evil-visual-state-map (kbd "<") 'felipe/evil-shift-left-visual)
    (define-key evil-visual-state-map [tab] 'felipe/evil-shift-right-visual)
    (define-key evil-visual-state-map [S-tab] 'felipe/evil-shift-left-visual)

    (defun minibuffer-keyboard-quit ()
      "Abort recursive edit.
       In Delete Selection mode, if the mark is active, just deactivate it;
       then it takes a second \\[keyboard-quit] to abort the minibuffer."
      (interactive)
      (if (and delete-selection-mode transient-mark-mode mark-active)
          (setq deactivate-mark  t)
        (when (get-buffer "*Completions*") (delete-windows-on "*Completions*"))
        (abort-recursive-edit)))

    (define-key evil-normal-state-map [escape] 'keyboard-quit)
    (define-key evil-visual-state-map [escape] 'keyboard-quit)
    (define-key minibuffer-local-map [escape] 'minibuffer-keyboard-quit)
    (define-key minibuffer-local-ns-map [escape] 'minibuffer-keyboard-quit)
    (define-key minibuffer-local-completion-map [escape] 'minibuffer-keyboard-quit)
    (define-key minibuffer-local-must-match-map [escape] 'minibuffer-keyboard-quit)
    (define-key minibuffer-local-isearch-map [escape] 'minibuffer-keyboard-quit)
    (global-set-key [escape] 'evil-exit-emacs-state))
  #+END_SRC
** Evil surround
   #+BEGIN_SRC emacs-lisp
   (use-package evil-surround
     :ensure t
     :after evil
     :config
     (global-evil-surround-mode 1))
   #+END_SRC
** Evil commentary
   #+BEGIN_SRC emacs-lisp
   (use-package evil-commentary
     :ensure t
     :after evil
     :config
     (evil-commentary-mode))
   #+END_SRC
** Evil leader
   #+BEGIN_SRC emacs-lisp
   (use-package evil-leader
     :ensure t
     :after evil
     :config
     (global-evil-leader-mode))
   #+END_SRC
** Evil collection
   #+BEGIN_SRC emacs-lisp
   (use-package evil-collection
     :after evil
     :ensure t
     :config
     (evil-collection-init))
   #+END_SRC
** Folding
   #+BEGIN_SRC emacs-lisp
   (use-package vimish-fold
     :ensure t
     :init
     (setq vimish-fold-persist-on-saving t))

   (use-package evil-vimish-fold
     :ensure t
     :after vimish-fold
     :init
     (evil-vimish-fold-mode))
   #+END_SRC
* Ivy/counsel
  #+BEGIN_SRC emacs-lisp
  (use-package ivy
    :ensure t
    :config
    (ivy-mode 1)
    (use-package ivy-xref
      :ensure t
      :init
      (setq xref-show-xrefs-function #'ivy-xref-show-xrefs)))

  (use-package counsel
    :ensure t
    :after ivy
    :init
    (setenv "FZF_DEFAULT_COMMAND"
            "rg --files --follow --glob \"!thirdparty/*\"")
    (setq counsel-find-file-ignore-regexp
          (concat
           ;; File names beginning with # or .
           "\\(?:\\`[#.]\\)"
           ;; File names ending with # or ~
           "\\|\\(?:\\`.+?[#~]\\'\\)"))
    :config
    (use-package counsel-projectile
      :ensure t
      :after projectile
      :config
      (counsel-projectile-mode)))
  #+END_SRC
* Interface
** All the icons
   #+BEGIN_SRC emacs-lisp
   (use-package all-the-icons
     :ensure t
     :init
     (setq inhibit-compacting-font-caches t))
   #+END_SRC
** Hide UI elements
   #+BEGIN_SRC emacs-lisp
   (menu-bar-mode -1)
   (tool-bar-mode -1)
   (scroll-bar-mode -1)
   (blink-cursor-mode 0)

   #+END_SRC
   
   The following bit is to fix scroll bars being shown in emacsclient
   #+BEGIN_SRC emacs-lisp
   (defun felipe/disable-scroll-bars (frame)
     (modify-frame-parameters frame
                              '((vertical-scroll-bars . nil)
                                (horizontal-scroll-bars . nil))))
   (add-hook 'after-make-frame-functions 'felipe/disable-scroll-bars)
   #+END_SRC
** Font
   #+BEGIN_SRC emacs-lisp
   (setq felipe/default-font-size-pt 12
         felipe/font-size-pt felipe/default-font-size-pt)

   (add-to-list 'default-frame-alist '(font . "-CYEL-Iosevka-semibold-normal-normal-*-16-*-*-*-d-0-iso10646-1"))

   (defun felipe/font-size-adj (&optional arg)
     (interactive "p")
     (if (= arg 0)
       (setq felipe/font-size-pt felipe/default-font-size-pt)
       (setq felipe/font-size-pt (+ felipe/font-size-pt arg)))
     ;; The internal font size value is 10x the font size in points unit.
     ;; So a 10pt font size is equal to 100 in internal font size value.
     (set-face-attribute 'default nil :height (* felipe/font-size-pt 10)))

   (defun felipe/font-size-incr  () (interactive) (felipe/font-size-adj +1))
   (defun felipe/font-size-decr  () (interactive) (felipe/font-size-adj -1))
   (defun felipe/font-size-reset () (interactive) (felipe/font-size-adj 0))

   (felipe/font-size-reset)
   #+END_SRC
** Theming
   #+BEGIN_SRC emacs-lisp
   ;; (use-package darktooth-theme
   ;;   :ensure t
   ;;   :config
   ;;   (load-theme 'darktooth t)
   ;;   (darktooth-modeline-one))

   (use-package kaolin-themes
     :ensure t
     :config
     (load-theme 'kaolin-dark t))
   #+END_SRC
** Shackle
   #+BEGIN_SRC emacs-lisp
   (use-package shackle
     :ensure t)
   #+END_SRC
** Which key
   #+BEGIN_SRC emacs-lisp
   (use-package which-key
     :ensure t
     :config
     (which-key-mode)) 
   #+END_SRC
** Neotree
   #+BEGIN_SRC emacs-lisp
   (use-package neotree
     :ensure t)
   #+END_SRC
** General
   #+BEGIN_SRC emacs-lisp
     (use-package general
       :ensure t
       :config
       (general-create-definer felipe/leader-def
	 :prefix "SPC"))
   #+END_SRC
** Modeline
   #+BEGIN_SRC emacs-lisp
   (use-package telephone-line
     :ensure t
     :init
     ;; Need to display telephone-line in *Messages* buffer
     (defun recreate-message-buffer ()
       (cl-flet ((buffer-string* (buffer)
                                 (with-current-buffer buffer
                                   (buffer-string))))
         (let ((msg (buffer-string* "*Messages*")))
           (kill-buffer "*Messages*")
           (message msg))))

     (add-hook 'after-init-hook #'recreate-message-buffer)

     ;; :hook (after-init . telephone-line-mode)

     :config
     ;; To create custom segments
     (require 'telephone-line-utils)

     ;; Set subseparator
     ;; TODO: function to choose separator by name
     (if window-system
         (progn
           (setq telephone-line-secondary-left-separator 'telephone-line-identity-hollow-left)
           (setq telephone-line-secondary-right-separator 'telephone-line-identity-hollow-right)))

     ;;; Custom segments

     ;; Display major mode
     ;; TODO: rewrite with var/macro
     (telephone-line-defsegment* my-major-mode-segment ()
       (let ((mode (cond
                    ((string= mode-name "Fundamental") "text")
                    ((string= mode-name "Emacs-Lisp") "elisp")
                    ((string= mode-name "Javascript-IDE") "js")
                    ((string= mode-name "Javascript-IDE") "js")
                    ((string= mode-name "undo-tree-visualizer") "undotree")
                    (t (downcase mode-name)))))
         ;; (propertize mode 'face `(:foreground "#9d81ba")))) ;; galaxy
         (propertize mode 'face `font-lock-string-face)))

     ;; TODO: add raise or v-adjust
     (telephone-line-defsegment* my-major-mode-segment-icon ()
       (let ((mode (cond
                    ((string= mode-name "Fundamental") "text")
                    ((string= mode-name "Emacs-Lisp") "elisp")
                    ((string= mode-name "Javascript-IDE") "js")
                    ((string= mode-name "Javascript-IDE") "js")
                    ((string= mode-name "undo-tree-visualizer") "undotree")
                    (t (downcase mode-name))))
             (icon (all-the-icons-icon-for-mode major-mode)))
         (concat
          (when
              (and (not (eq major-mode (all-the-icons-icon-for-mode major-mode)))
                   (telephone-line-selected-window-active))
            (format "%s "
                    (propertize icon
                                'help-echo (format "Major-mode: `%s'" major-mode)
                                'display '(raise 0)
                                'face `(:height 1.0
                                                :family ,(all-the-icons-icon-family-for-mode major-mode)
                                                :inherit font-lock-string-face))))
          (propertize mode 'face `font-lock-string-face))))

     (telephone-line-defsegment my-evil-segment ()
       "Display evil state as text symbol."
       (let ((tag (cond
                   ((string= evil-state "normal")    ":")
                   ((string= evil-state "insert")    ">")
                   ((string= evil-state "replace")   "r")
                   ((string= evil-state "visual")    "!")
                   ((string= evil-state "operator")  "=")
                   ((string= evil-state "motion")    "m")
                   ((string= evil-state "emacs")     "Emacs")
                   (t "-"))))
         (format " %s" tag)))

     (telephone-line-defsegment my-evil-segment-icons ()
       "Display evil state as icon with all-the-icons."
       (let ((tag (cond
                   ((string= evil-state "normal")    (all-the-icons-faicon "magic"))
                   ((string= evil-state "insert")    (all-the-icons-faicon "pencil"))
                   ((string= evil-state "replace")   (all-the-icons-faicon "eraser"))
                   ((string= evil-state "visual")    (all-the-icons-faicon "clipboard"))
                   ;; TODO:
                   ;; ((string= evil-state "operator")  (all-the-icons-faicon "dot-circle-o"))
                   ((string= evil-state "motion")    (all-the-icons-faicon "angle-double-right"))
                   ((string= evil-state "emacs")     (all-the-icons-fileicon "org"))
                   (t "-"))))
         (format " %s" tag)))

     ;; Display buffer name
     (telephone-line-defsegment my-buffer-segment ()
       (format "%s %s"
               (propertize (all-the-icons-fileicon "elisp")
                           'face `(:family ,(all-the-icons-fileicon-family) :height 1.0)
                           'display '(raise 0.0))
               (propertize
                (format "%s"
                        (telephone-line-raw mode-line-buffer-identification t)))))
     ;; 'face `(:foreground ,fg-color))))

     ;; Display current position in a buffer
     ;; (telephone-line-defsegment my-position-segment ()
     ;;   (if (telephone-line-selected-window-active)
     ;;       (if (eq major-mode 'paradox-menu-mode)
     ;;           (telephone-line-trim (format-mode-line mode-line-front-space))
     ;;         '(" %3l,%2c "))))

     (declare-function column-number-at-pos "env-fu")

     (telephone-line-defsegment my-position-segment ()
       (let ((line (line-number-at-pos (point)))
             (column (current-column)))
         (format " %3d:%2d " line column)))

     ;; Exclude some buffers in modeline
     (defvar modeline-ignored-modes nil
       "List of major modes to ignore in modeline")

     (setq modeline-ignored-modes '("Dashboard"
                                    "Warnings"
                                    "Compilation"
                                    "EShell"
                                    "Debugger"
                                    "Quickrun"
                                    "REPL"
                                    "IELM"
                                    "Messages"))

     ;; Display modified status
     (telephone-line-defsegment my-modified-status-segment ()
       (when (and (buffer-modified-p) (not (member mode-name modeline-ignored-modes)) (not buffer-read-only))
         (propertize "+" 'face `(:foreground "#85b654"))))

     ;; Display read-only status
     (telephone-line-defsegment my-read-only-status-segment ()
       (when buffer-read-only
         ;; (propertize "ro" 'face `(:foreground "#dbac66"))
         (propertize (all-the-icons-octicon "key")
                     'face `(:family ,(all-the-icons-octicon-family) :height 1.0 :foreground "dim gray")
                     'display '(raise 0.0))))

     ;; Display encoding system
     (telephone-line-defsegment my-coding-segment ()
       (let* ((code (symbol-name buffer-file-coding-system))
              (eol-type (coding-system-eol-type buffer-file-coding-system))
              (eol (cond
                    ((eq 0 eol-type) "unix")
                    ((eq 1 eol-type) "dos")
                    ((eq 2 eol-type) "mac")
                    (t "-"))))
         (format  "%s " eol)))

     ;; TODO:
     ;; Hide vc backend in modeline
     (defadvice vc-mode-line (after strip-backend () activate)
       (when (stringp vc-mode)
         (let ((my-vc (replace-regexp-in-string "^ Git." "" vc-mode)))
           (setq vc-mode my-vc))))

     ;; Display current branch
     ;; TODO: move raise and etc into var
     (telephone-line-defsegment my-vc-segment ()
       (when (and vc-mode (telephone-line-selected-window-active))
         ;; double format to prevent warnings in '*Messages*' buffer
         (format "%s %s"
                 (propertize (all-the-icons-octicon "git-branch")
                             'face `(:family ,(all-the-icons-octicon-family) :height 1.0 :foreground ,(face-foreground 'font-lock-variable-name-face))
                             'display '(raise 0.0))
                 (propertize
                  (format "%s"
                          (telephone-line-raw vc-mode t))
                  'face `(:foreground ,(face-foreground 'font-lock-variable-name-face))))))


     ;; ;; TODO: free visual selection
     ;; ;; TODO: the segment doesn't update in real-time
     (telephone-line-defsegment selection-info ()
       "Information about the size of the current selection, when applicable.
     Supports both Emacs and Evil cursor conventions."
       (when (or mark-active
                 (and (bound-and-true-p evil-local-mode)
                      (eq 'visual evil-state)))
         (let* (
                ;; (lines (count-lines (region-beginning) (min (1+ (region-end)) (point-max))))
                (lines (count-lines (region-beginning) (region-end)))
                (chars (- (1+ (region-end)) (region-beginning)))
                (cols (1+ (abs (- (column-number-at-pos (region-end))
                                  (column-number-at-pos (region-beginning))))))
                (evil (and (bound-and-true-p evil-state) (eq 'visual evil-state)))
                (rect (or (bound-and-true-p rectangle-mark-mode)
                          (and evil (eq 'block evil-visual-selection))))
                (multi-line (or (> lines 1) (and evil (eq 'line evil-visual-selection)))))
           (cond
            (rect (format "%d×%d" lines (if evil cols (1- cols))))
            (multi-line (format "%dL" lines))
            (t (format "%d" (if evil chars (1- chars))))))))


     (telephone-line-defsegment my-flycheck-segment ()
       ;; TODO: split errors and warnings
       (when (boundp 'flycheck-last-status-change)
         (pcase flycheck-last-status-change
           ('finished (if flycheck-current-errors
                          (let-alist (flycheck-count-errors flycheck-current-errors)
                            (let ((sum (+ (or .error 0) (or .warning 0))))
                              (format " %s: %s"
                                      (if .error "errors" "warnings")
                                      (number-to-string sum))))
                        ;; TODO:
                        " succeed"))
           ('running     " working...")
           ('no-checker  "")
           ('errored     " error")
           ('interrupted " interrupted"))))

     (telephone-line-defsegment my-words-count-segment ()
       (format "%d" (count-words (point-min) (point-max))))

     (setq telephone-line-primary-left-separator 'telephone-line-tan-left)
     (setq telephone-line-primary-right-separator 'telephone-line-tan-right)

     ;; Set mode-line height
     (setq telephone-line-height 30)

     ;; Left edge
     ;; TODO: gray background for buffer and mode segment in inactive line
     (setq telephone-line-lhs
           '((evil   . (my-evil-segment))
             ;; (accent . (telephone-line-filesize-segment))
             (nil    . (telephone-line-projectile-buffer-segment))
             (nil    . (my-modified-status-segment))
             (nil    . (my-read-only-status-segment))
             (nil    . (selection-info))))
     ;; (nil    . (my-flycheck-segment))))

     ;; Right edge
     (setq telephone-line-rhs
           '((nil    . (my-vc-segment))
             (accent . (my-position-segment))
             (nil    . (my-major-mode-segment))
             ;; (nil    . (my-major-mode-segment-icon))
             (accent . ((my-coding-segment :active)))))

     (telephone-line-mode 1))
   #+END_SRC
* Misc
** Disable unwanted buffers
   #+BEGIN_SRC emacs-lisp
   ;; (setq-default message-log-max nil)
   ;; (kill-buffer "*Messages*")
   #+END_SRC
** Better yes/no questions in emacs
   This makes emacs accept only y/n as answers.
   #+BEGIN_SRC emacs-lisp
   (fset 'yes-or-no-p 'y-or-n-p)
   #+END_SRC
** Electric pairs
   #+BEGIN_SRC emacs-lisp
   (electric-pair-mode)
   #+END_SRC
** Rainbow delimeters
   #+BEGIN_SRC emacs-lisp
   (use-package rainbow-delimiters
     :ensure t
     :config
     (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
   #+END_SRC
** Smooth scrolling
   #+BEGIN_SRC emacs-lisp
   (setq scroll-margin 10
         scroll-conservatively 0
         scroll-up-aggressively 0.01
         scroll-down-aggressively 0.01)
   (setq-default scroll-up-aggressively 0.01
                 scroll-down-aggressively 0.01)

   ;; scroll one line at a time (less "jumpy" than defaults)
   (setq mouse-wheel-scroll-amount '(3 ((shift) . 3))) ;; one line at a time
   (setq mouse-wheel-progressive-speed nil) ;; don't accelerate scrolling
   (setq mouse-wheel-follow-mouse 't) ;; scroll window under mouse
   (setq scroll-step 1) ;; keyboard scroll one line at a time
   #+END_SRC
** Change backup/autosave default directories
   This will stop emacs from making files like =#this#= and =this~= all over the place
   #+BEGIN_SRC emacs-lisp
   (setq backup-directory-alist         '(("." . "~/.emacs.d/backups"))
         auto-save-file-name-transforms '((".*" "~/.emacs.d/autosaves/\\1" t)))

   (make-directory "~/.emacs.d/autosaves/" t)
   #+END_SRC
** Editorconfig
   #+BEGIN_SRC emacs-lisp
   (use-package editorconfig
     :ensure t
     :config
     (editorconfig-mode 1))
   #+END_SRC
** Shell-pop
   #+BEGIN_SRC emacs-lisp
   (use-package shell-pop
     :ensure t
     :init
     (setq shell-pop-window-position "bottom"
           shell-pop-window-size 20
           shell-pop-shell-type '("ansi-term" "*ansi-term*" (lambda nil (ansi-term shell-pop-term-shell)))))
   #+END_SRC
** Pixelwise resizing
   #+BEGIN_SRC emacs-lisp
   (setq frame-resize-pixelwise t)
   #+END_SRC
** Dumb jump
   #+BEGIN_SRC emacs-lisp
   (use-package dumb-jump
     :ensure t
     :config
     (dumb-jump-mode))
   #+END_SRC
** Zeal at point
   Zeal is a documentation browser and this package allows it to integrate with emacs.
   #+BEGIN_SRC emacs-lisp
   (use-package zeal-at-point
     :ensure t)
   #+END_SRC
** Make zoom work for all buffers
   #+BEGIN_SRC emacs-lisp
   (defadvice text-scale-increase (around all-buffers (arg) activate)
     (dolist (buffer (buffer-list))
       (with-current-buffer buffer
         ad-do-it)))
   #+END_SRC
** Reduce scrolling lag
   #+BEGIN_SRC emacs-lisp
   ;; (setq auto-window-vscroll t)
   #+END_SRC
** Restart emacs
   #+BEGIN_SRC emacs-lisp
   (use-package restart-emacs
     :ensure t
     :init
     (setq restart-emacs-restore-frames nil))
   #+END_SRC
** Find other file
   #+BEGIN_SRC emacs-lisp
   (use-package cff
     :ensure t)
   #+END_SRC
** Writeroom
   #+BEGIN_SRC emacs-lisp
   (use-package writeroom-mode
     :ensure t)
   #+END_SRC
** Use spaces instead of tabs by default
   #+BEGIN_SRC emacs-lisp
   (setq-default indent-tabs-mode nil)
   #+END_SRC
* Version control
** Magit
  #+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t)

  (use-package evil-magit
    :ensure t
    :after magit)
  #+END_SRC
** Git gutter
   #+BEGIN_SRC emacs-lisp
   (use-package git-gutter-fringe
     :ensure t
     :config
     (global-git-gutter-mode +1)

     (setq-default fringes-outside-margins t)
     ;; thin fringe bitmaps
     (fringe-helper-define 'git-gutter-fr:added '(center repeated)
       "XXX.....")
     (fringe-helper-define 'git-gutter-fr:modified '(center repeated)
       "XXX.....")
     (fringe-helper-define 'git-gutter-fr:deleted 'bottom
       "X......."
       "XX......"
       "XXX....."
       "XXXX...."))
   #+END_SRC
* Flycheck
  #+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t
    :config
    (global-flycheck-mode)) 

  (use-package flycheck-pos-tip
    :ensure t
    :after flycheck
    :config
    (setq flycheck-pos-tip-timeout 60)
    (flycheck-pos-tip-mode))
  #+END_SRC
* Company
  #+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :config
    (define-key company-active-map (kbd "M-n") nil)
    (define-key company-active-map (kbd "M-p") nil)
    (define-key company-active-map (kbd "C-n") #'company-select-next)
    (define-key company-active-map (kbd "C-p") #'company-select-previous)
    (global-company-mode))
  #+END_SRC
* Snippets
  #+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :config
    (yas-global-mode 1))

  (use-package yasnippet-snippets
    :ensure t
    :after yasnippet)
  #+END_SRC
* Org
  #+BEGIN_SRC emacs-lisp
  (use-package org
    :ensure t
    :init
    (setq org-src-fontify-natively t
          org-src-preserve-indentation nil 
          org-edit-src-content-indentation 0
          org-hide-emphasis-markers t))
  #+END_SRC
** Org bulltes
   #+BEGIN_SRC emacs-lisp
   ;; (use-package org-bullets
   ;;   :ensure t
   ;;   :config
   ;;   (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
   #+END_SRC
** Org capture
   #+BEGIN_SRC emacs-lisp
     (setq org-default-notes-file "~/nextcloud/notes.org")

     (setq org-capture-templates
           '(("t" "To-do" entry (file+headline "~/nextcloud/notes.org" "To-do")
              "* TODO %?")))
   #+END_SRC
** Org projectile
   #+BEGIN_SRC emacs-lisp
     (use-package org-projectile
       :ensure t
       :after projectile
       :bind (("C-c n p" . org-projectile-project-todo-completing-read)
              ("C-c c" . org-capture))
       :config
       (org-projectile-per-project)
       (setq org-projectile-per-project-filepath "todo.org")
       (setq org-agenda-files (append org-agenda-files (org-projectile-todo-files)))
       (push (org-projectile-project-todo-entry) org-capture-templates))
   #+END_SRC
** Ox TWBS
   #+BEGIN_SRC emacs-lisp
    (use-package ox-twbs
      :ensure t)
   #+END_SRC
** Ox Reveal
   #+BEGIN_SRC emacs-lisp
    (use-package ox-reveal
      :ensure t)
    (use-package htmlize
      :ensure t)
   #+END_SRC
* Projectile
  #+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :init
    ;; (setq projectile-require-project-root nil)
    :config
    (projectile-global-mode))
  #+END_SRC
* Line numbers
  #+BEGIN_SRC emacs-lisp
  ;; (add-hook 'prog-mode-hook (lambda () (display-line-numbers-mode)))

  ;; (add-hook 'display-line-numbers-mode-hook
  ;;           (lambda ()
  ;;             (setq display-line-numbers 'relative)))
  #+END_SRC
* Languages
** LSP
   #+BEGIN_SRC emacs-lisp
   (use-package lsp-mode
     :ensure t
     :after flycheck
     :init
     (setq lsp-highlight-symbol-at-point nil)
     :config
     (use-package lsp-ui
       :ensure t
       :init
       (setq lsp-ui-sideline-enable nil
             lsp-ui-doc-include-signature nil
             lsp-ui-doc-enable nil)
       :config
       (add-hook 'lsp-mode-hook 'lsp-ui-mode))
     (use-package company-lsp
       :ensure t
       :after company
       :init
       (setq company-lsp-async t)
       ;; (setq company-transformers nil
       ;;       company-lsp-async t
       ;;       company-lsp-cache-candidates nil
       ;;       company-lsp-enable-snippet nil)
       :config
       (push 'company-lsp company-backends)))
   #+END_SRC
** Emacs lisp
   #+BEGIN_SRC emacs-lisp
   (add-hook 'emacs-lisp-mode-hook
             (lambda ()
               (setq tab-width 2)
               (setq evil-shift-width 2)))
   #+END_SRC
** Rust
   #+BEGIN_SRC emacs-lisp
   (use-package rust-mode
     :ensure t)

   (use-package lsp-rust
     :ensure t
     :after lsp-mode
     :init
     (setq lsp-rust-rls-command '("rustup" "run" "stable" "rls"))
     :config
     (lsp-rust-set-config "wait_to_build" 200)
     (add-hook 'rust-mode-hook #'lsp-rust-enable)
     (add-hook 'rust-mode-hook #'flycheck-mode))

   (felipe/leader-def 'normal rust-mode-map
     "mf" 'rust-format-buffer)

   (general-def 'normal rust-mode-map
     "gd" 'xref-find-definitions
     "gD" 'xref-find-definitions-other-window)
   #+END_SRC
** C/C++
*** Cquery
    #+BEGIN_SRC emacs-lisp
    (use-package cquery
      :ensure t
      :init
      (setq cquery-executable "/usr/bin/cquery"
            ;; cquery-extra-args '("--log-file=/tmp/cq.log")
            ;; cquery-sem-highlight-method 'font-lock
            ;; cquery-extra-init-params '(:completion (:detailedLabel t))
            )
      :config
      (defun felipe/cquery-hook ()
        (when (or (eq major-mode 'c-mode)
                  (eq major-mode 'c++-mode))
          (lsp-cquery-enable)))

      (add-hook 'c-mode-common-hook 'felipe/cquery-hook))
    #+END_SRC
*** CCLS
    #+BEGIN_SRC emacs-lisp
    ;; (use-package ccls
    ;;   :ensure t
    ;;   :config
    ;;   (defun felipe/ccls-hook ()
    ;;     (when (or (eq major-mode 'c-mode)
    ;;               (eq major-mode 'c++-mode))
    ;;       (lsp-ccls-enable)))

    ;;   (add-hook 'c-mode-common-hook 'felipe/ccls-hook))
    #+END_SRC
*** Clangd
    #+BEGIN_SRC emacs-lisp
    ;; (lsp-define-stdio-client
    ;;  lsp-clangd-c
    ;;  "c"
    ;;  'projectile-project-root
    ;;  nil
    ;;  :ignore-regexps
    ;;  '("^Error -[0-9]+: .+$")
    ;;  :command-fn
    ;;  (lambda ()
    ;;    (list "clangd"
    ;;          (concat "-compile-commands-dir="
    ;;                  (projectile-project-root)
    ;;                  "build"))))

    ;; (lsp-define-stdio-client
    ;;  lsp-clangd-c++
    ;;  "cpp"
    ;;  'projectile-project-root
    ;;  nil
    ;;  :ignore-regexps
    ;;  '("^Error -[0-9]+: .+$")
    ;;  :command-fn
    ;;  (lambda ()
    ;;    (list "clangd"
    ;;          (concat "-compile-commands-dir="
    ;;                  (projectile-project-root)
    ;;                  "build"))))

    ;; (defun felipe/clangd-hook ()
    ;;   (when (eq major-mode 'c-mode)
    ;;     (lsp-clangd-c-enable))
    ;;   (when (eq major-mode 'c++-mode)
    ;;     (lsp-clangd-c++-enable)))

    ;; (add-hook 'c-mode-hook #'felipe/clangd-hook)
    ;; (add-hook 'c++-mode-hook #'felipe/clangd-hook)
    #+END_SRC
*** Misc
    #+BEGIN_SRC emacs-lisp
    (use-package clang-format
        :ensure t)

    (use-package meson-mode
        :ensure t)

    (use-package cmake-mode
        :ensure t)

    (use-package bison-mode
        :ensure t
        :init
        (setq bison-rule-separator-column 2
            bison-rule-enumeration-column 4))

    (defun felipe/c-indent-hook ()
        (interactive)
        (setq tab-width 2
            evil-shift-width 2
            c-basic-offset 2)
        (c-set-offset 'brace-list-intro '+)
        (c-set-offset 'arglist-intro '+)
        (c-set-offset 'arglist-close 0))

    (add-hook 'c-mode-common-hook 'felipe/c-indent-hook)
    (add-hook 'bison-mode-hook 'felipe/c-indent-hook)

    (felipe/leader-def 'normal c++-mode-map
        "mf" 'clang-format-buffer
        "mr" 'lsp-rename)
    (felipe/leader-def 'normal c-mode-map
        "mf" 'clang-format-buffer
        "mr" 'lsp-rename)

    ;; (general-def 'normal c++-mode-map
    ;;     "gd" 'xref-find-definitions
    ;;     "gD" 'xref-find-definitions-other-window)
    ;; (general-def 'normal c-mode-map
    ;;     "gd" 'xref-find-definitions
    ;;     "gD" 'xref-find-definitions-other-window)

    (general-def 'normal c++-mode-map
        "gd" 'lsp-ui-peek-find-definitions)
    (general-def 'normal c-mode-map
        "gd" 'lsp-ui-peek-find-definitions)
    #+END_SRC
** Haskell
   #+BEGIN_SRC emacs-lisp
   (use-package intero
     :ensure t
     :config
     (add-hook 'haskell-mode-hook 'intero-mode))
   #+END_SRC
** Python
   #+BEGIN_SRC emacs-lisp
   (use-package lsp-python
     :ensure t
     :after lsp-mode
     :config
     (add-hook 'python-mode-hook #'lsp-python-enable))

   (felipe/leader-def 'normal python-mode-map
     "mf" 'lsp-format-buffer)

   (general-def 'normal python-mode-map
     "K" 'lsp-info-under-point
     "gd" 'xref-find-definitions
     "gd" 'xref-find-definitions-other-window)
   #+END_SRC
** Clojure
   #+BEGIN_SRC emacs-lisp
   (use-package clojure-mode
     :ensure t)

   (use-package cider
     :ensure t
     :init
     (setq nrepl-hide-special-buffers t))

   (felipe/leader-def 'normal clojure-mode-map
     "mf" 'cider-format-buffer
     "ms" '(cider-jack-in
            :which-key "start repl")
     "mr" '(cider-switch-to-repl-buffer
            :which-key "repl buffer"))

   (general-def 'normal clojure-mode-map
     "K" 'cider-doc)
   #+END_SRC
** Elixir
   #+BEGIN_SRC emacs-lisp
   (use-package alchemist
     :ensure t)
   #+END_SRC
** Go
   #+BEGIN_SRC emacs-lisp
   (use-package go-mode
     :ensure t
     :config
     (use-package go-eldoc
       :ensure t
       :config
       (add-hook 'go-mode-hook 'go-eldoc-setup)))

   (use-package company-go
     :ensure t
     :after company)

   (felipe/leader-def 'normal go-mode-map
     "mf" 'gofmt
     "mi" '(go-import-add
            :which-key "add imports"))

   (general-def 'normal go-mode-map
     "K" 'godoc-at-point
     "gd" 'godef-jump
     "gD" 'godef-jump-other-window)
   #+END_SRC
** Nim
   #+BEGIN_SRC emacs-lisp
   (use-package nim-mode
     :ensure t
     :config
     (add-hook 'nim-mode-hook 'nimsuggest-mode))
   #+END_SRC
** Dart
   #+BEGIN_SRC emacs-lisp
   (use-package dart-mode
     :ensure t
     :init
     (setq dart-enable-analysis-server nil))
   #+END_SRC
** C#
   #+BEGIN_SRC emacs-lisp
   (use-package csharp-mode
     :ensure t)

   (use-package omnisharp
     :ensure t
     :after company
     :config
     (add-hook 'csharp-mode-hook 'omnisharp-mode)
     (add-to-list 'company-backends 'company-omnisharp)
     (add-hook 'csharp-mode-hook #'company-mode)
     (add-hook 'csharp-mode-hook #'flycheck-mode))
   #+END_SRC
** Web
   #+BEGIN_SRC emacs-lisp
   (use-package web-mode
     :ensure t)
   #+END_SRC
** Javascript & Typescript
   #+BEGIN_SRC emacs-lisp
   (setq js-indent-level 2)

   (add-hook 'js-mode-hook
             (lambda ()
               (setq tab-width 2)
               (setq evil-shift-width 2)))

   (use-package tide
     :ensure t
     :config
     (defun setup-tide-mode ()
       (interactive)
       (tide-setup)
       (flycheck-mode +1)
       ;; (setq flycheck-check-syntax-automatically '(save mode-enabled))
       (eldoc-mode +1)
       (tide-hl-identifier-mode +1)
       (company-mode +1))

     ;; aligns annotation to the right hand side
     (setq company-tooltip-align-annotations t)

     ;; formats the buffer before saving
     ;; (add-hook 'before-save-hook 'tide-format-before-save)
     (add-hook 'js-mode-hook #'setup-tide-mode)
     ;; configure javascript-tide checker to run after your default javascript checker
     (flycheck-add-next-checker 'javascript-eslint 'javascript-tide 'append)

     (add-hook 'typescript-mode-hook #'setup-tide-mode))

   (felipe/leader-def 'normal js-mode-map
     "mf" 'tide-format
     "mr" '(tide-rename-symbol
            :which-key "rename symbol"))

   (general-def 'normal js-mode-map
     "K" 'tide-documentation-at-point
     "gd" 'xref-find-definitions
     "gD" 'xref-find-definitions-other-window)

   (felipe/leader-def 'normal typescript-mode-map
     "mf" 'tide-format
     "mr" '(tide-rename-symbol
            :which-key "rename symbol"))

   (general-def 'normal typescript-mode-map
     "K" 'tide-documentation-at-point
     "gd" 'xref-find-definitions
     "gD" 'xref-find-definitions-other-window)
   #+END_SRC
** Lua
   #+BEGIN_SRC emacs-lisp
   (use-package lua-mode
     :ensure t
     :init
     (setq lua-indent-level 2))

   (felipe/leader-def 'normal lua-mode-map
     "mr" '((lambda ()
              (interactive)
              (shell-command (concat "love " (projectile-project-root))))
            :which-key "run game"))
   #+END_SRC
** GLSL
   #+BEGIN_SRC emacs-lisp
   (use-package glsl-mode
     :ensure t
     :config
     (autoload 'glsl-mode "glsl-mode" nil t)
     (add-to-list 'auto-mode-alist '("\\.glsl\\'" . glsl-mode))
     (add-to-list 'auto-mode-alist '("\\.glslf\\'" . glsl-mode))
     (add-to-list 'auto-mode-alist '("\\.glslv\\'" . glsl-mode))
     (add-to-list 'auto-mode-alist '("\\.vert\\'" . glsl-mode))
     (add-to-list 'auto-mode-alist '("\\.frag\\'" . glsl-mode))
     (add-to-list 'auto-mode-alist '("\\.geom\\'" . glsl-mode)))
   #+END_SRC
** Godot
   #+BEGIN_SRC emacs-lisp
   (use-package gdscript-mode
     :ensure t)
   #+END_SRC
** YAML
   #+BEGIN_SRC emacs-lisp
   (use-package yaml-mode
     :ensure t)
   #+END_SRC
* Keyboard
** Make ESC actually escape stuff
   #+BEGIN_SRC emacs-lisp
   (define-key isearch-mode-map [escape] 'isearch-abort)   ;; isearch
   (define-key isearch-mode-map "\e" 'isearch-abort)       ;; \e seems to work better for terminals
   (global-set-key [escape] 'keyboard-escape-quit)         ;; everywhere else
   #+END_SRC
** Zoom with mouse scroll
   #+BEGIN_SRC emacs-lisp
   (global-set-key [C-mouse-4] 'felipe/font-size-incr)
   (global-set-key [C-mouse-5] 'felipe/font-size-decr)
   #+END_SRC
** Zoom keybinds
   #+BEGIN_SRC emacs-lisp
   (define-key global-map (kbd "C-=") 'felipe/font-size-incr)
   (define-key global-map (kbd "C--") 'felipe/font-size-decr)
   (define-key global-map (kbd "C-0") 'felipe/font-size-reset)
   #+END_SRC
** Dumb jump bindings
   #+BEGIN_SRC emacs-lisp
   (evil-global-set-key 'normal "gd" 'dumb-jump-go)
   (evil-global-set-key 'normal "gD" 'dumb-jump-go-other-window)
   #+END_SRC
** Leader mappings
*** Misc
    #+BEGIN_SRC emacs-lisp
    (felipe/leader-def
      :keymaps 'normal
      "a" '(projectile-find-other-file :which-key "other file")
      "A" '(projectile-find-other-file-other-window :which-key "other file (other window)"))
    #+END_SRC
*** Terminal
    #+BEGIN_SRC emacs-lisp
    (felipe/leader-def
      :keymaps 'normal
      "'" '(shell-pop :which-key "terminal"))
    #+END_SRC
*** Toggles
    #+BEGIN_SRC emacs-lisp
    (felipe/leader-def
      :keymaps 'normal
      "t" '(nil :which-key "theme/toggles")
      "tt" '(counsel-load-theme
             :which-key "themes")
      "td" '(felipe/toggle-dark-theme
             :which-key "toggle dark theme"))
    #+END_SRC
*** Files
    #+BEGIN_SRC emacs-lisp
    (felipe/leader-def
      :keymaps 'normal
      "f" '(nil :which-key "file")
      "ff" '(counsel-find-file
             :which-key "find file")
      "fe" '(nil :which-key "edit")
      "fed" '((lambda ()
                (interactive)
                (find-file "~/.emacs.d/config.org"))
              :which-key "emacs config")
      "fei" '((lambda ()
                (interactive)
                (find-file "~/.config/i3/config"))
              :which-key "i3 config")
      "fec" '((lambda ()
                (interactive)
                (find-file "~/.config/compton.conf"))
              :which-key "compton config")
      "fep" '((lambda ()
                (interactive)
                (find-file "~/.config/polybar/config"))
              :which-key "polybar config"))
    #+END_SRC
*** Buffers
    #+BEGIN_SRC emacs-lisp
    (felipe/leader-def
      :keymaps 'normal
      "b" '(nil :which-key "buffer")
      "bb" '(ivy-switch-buffer
             :which-key "switch buffer")
      "bd" '(kill-this-buffer
             :which-key "delete buffer")
      "br" '(rename-buffer
             :which-key "rename buffer")
      "bn" '(felipe/next-user-buffer
             :which-key "next buffer")
      "bp" '(felipe/previous-user-buffer
             :which-key "previous buffer")
      "bs" '((lambda ()
               (interactive)
               (switch-to-buffer "*scratch*"))
             :which-key "scratch buffer")
      "bcc" '((lambda ()
                (interactive)
                (mapcar (lambda (buffer)
                          (let ((safe-buffers (list "*scratch*" "*Messages*" "config.org"))
                                (name (buffer-name buffer)))
                            (unless (or
                                     (string-prefix-p "*Org" name)
                                     (member name safe-buffers))
                              (kill-buffer buffer)))) (buffer-list)))
              :which-key "clean buffers"))
    #+END_SRC
*** Window
    #+BEGIN_SRC emacs-lisp
    (felipe/leader-def
      :keymaps 'normal
      "w" '(nil :which-key "window")
      "w/" '(split-window-right
             :which-key "split right")
      "w-" '(split-window-below
             :which-key "split below")
      "wd" '(delete-window
             :which-key "delete window")
      "wb" '(balance-windows
             :which-key "balance windows"))
    #+END_SRC
*** Errors
    #+BEGIN_SRC emacs-lisp
    (felipe/leader-def
      :keymaps 'normal
      "e" '(nil :which-key "error")
      "en" '(flycheck-next-error
             :which-key "next error")
      "ep" '(flycheck-previous-error
             :which-key "previous error"))
    #+END_SRC
*** Ivy
    #+BEGIN_SRC emacs-lisp
    (felipe/leader-def
      :keymaps 'normal
      "i" '(nil :which-key "ivy")
      "ir" '(ivy-resume
             :which-key "resume"))
    #+END_SRC
*** Refactoring
    #+BEGIN_SRC emacs-lisp
    (felipe/leader-def
      :keymaps 'normal
      "r" '(nil :which-key "refactor")
      "rs" '(replace-string
             :which-key "replace string"))
    #+END_SRC
*** Projectile
    #+BEGIN_SRC emacs-lisp
    (felipe/leader-def
      :keymaps 'normal
      "p" '(nil :which-key "projectile")
      "pp" '(counsel-projectile-switch-project
             :which-key "switch project")
      "pa" '(projectile-add-known-project
             :which-key "add project")
      "pf" '(counsel-fzf
             :which-key "find file (fzf)")
      "pg" '(counsel-projectile-rg
             :which-key "grep"))
    #+END_SRC
*** Git
    #+BEGIN_SRC emacs-lisp
    (felipe/leader-def
      :keymaps 'normal
      "g" '(nil :which-key "git")
      "gg" '(magit-status
             :which-key "status"))
    #+END_SRC
*** Major mode
    #+BEGIN_SRC emacs-lisp
    (felipe/leader-def
      :keymaps 'normal
      "m" '(nil :which-key "major mode")
      "mr" '(nil :which-key "run/refactor")
      "mf" '(nil :which-key "format")
      "mg" '(nil :which-key "go"))
    #+END_SRC
*** Quitting
    #+BEGIN_SRC emacs-lisp
    (felipe/leader-def
      :keymaps 'normal
      "q" '(nil :which-key "quit")
      "qr" '(restart-emacs :which-key "restart emacs/server")
      "qq" '(save-buffers-kill-emacs :which-key "quit emacs/server"))
    #+END_SRC
* Diminish
  #+BEGIN_SRC emacs-lisp
  (use-package diminish
    :ensure t
    :config
    (diminish 'flycheck-mode)
    (diminish 'undo-tree-mode)
    (diminish 'editorconfig-mode)
    (diminish 'ivy-mode)
    (diminish 'which-key-mode)
    (diminish 'evil-commentary-mode)
    (diminish 'org-src-mode)
    (diminish 'git-gutter-mode)
    (diminish 'buffer-face-mode)
    (diminish 'auto-revert-mode))
  #+END_SRC
