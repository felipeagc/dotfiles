* GC hack
  Makes emacs start up a bit faster
  #+BEGIN_SRC emacs-lisp
  (setq gc-cons-threshold 100000000)
  #+END_SRC
* Setup package management
  #+BEGIN_SRC emacs-lisp
  (when (>= emacs-major-version 24)
    (setq-default
    load-prefer-newer t
    package-enable-at-startup nil)
    (package-initialize)
    (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/") t)
    (unless (package-installed-p 'use-package)
      (package-refresh-contents)
      (package-install 'use-package)))

  (setq use-package-always-ensure t)
  #+END_SRC
* Start server
  Starts the emacs server so we can use =emacsclient= to open files in the running instance.
  #+BEGIN_SRC emacs-lisp
    (require 'server)
    (unless (server-running-p)
      (server-start)) 
  #+END_SRC
* Custom definitions
** Properties
   #+BEGIN_SRC emacs-lisp
     (setq inhibit-splash-screen t)
     (setq inhibit-startup-message t)
     (setq felipe/leader-key "<SPC>")
   #+END_SRC
** Keybinding
   #+BEGIN_SRC emacs-lisp
    (defun felipe/name-bind (keycombo name)
      (interactive)
      (which-key-add-key-based-replacements (concat felipe/leader-key keycombo) name))

    (defun felipe/bind (keycombo command name)
      (interactive)
      (evil-leader/set-key keycombo command)
      (felipe/name-bind keycombo name))

    (defun felipe/name-bind-mode (keycombo name mode)
      (which-key-add-major-mode-key-based-replacements mode (concat felipe/leader-key keycombo) name))

    (defun felipe/bind-mode (keycombo command name mode)
      (evil-leader/set-key-for-mode mode keycombo command)
      (felipe/name-bind-mode keycombo name mode))
   #+END_SRC
** Functions
   #+BEGIN_SRC emacs-lisp
     (defun felipe/edit-todo()
       "Go to the todo file"
       (interactive)
       (find-file "~/todo.org"))

     (defun felipe/edit-config()
       "Edit the configuration file"
       (interactive)
       (find-file "~/.emacs.d/config.org"))

     (defun felipe/reload-config()
       "Reload the configuration file."
       (interactive)
       (load-file "~/.emacs.d/init.el")
       (evil-leader-mode)
       (felipe/edit-config))

     (defun felipe/set-font-size (size)
       "Changes the font size"
       (interactive (list (string-to-number (read-from-minibuffer "Font size: "))))
       (set-face-attribute 'default nil :height (* 10 size)))

     (defun set-internal-border (n)
       "Set or reset the internal border width N of the selected frame."
       (interactive (list (string-to-number (read-from-minibuffer "Border width: "))))
       (let ((w (or n 0)))
         (set-frame-parameter
          (selected-frame)
          'internal-border-width
          w)))
   #+END_SRC
** Evil
   These are used to modify evil's indent shift behavior
   #+BEGIN_SRC emacs-lisp
     (defun felipe/evil-shift-left-visual ()
       (interactive)
       (evil-shift-left (region-beginning) (region-end))
       (evil-normal-state)
       (evil-visual-restore))

     (defun felipe/evil-shift-right-visual ()
       (interactive)
       (evil-shift-right (region-beginning) (region-end))
       (evil-normal-state)
       (evil-visual-restore))
   #+END_SRC
* UI
** Setup
   Set the font, hide toolbars, etc.
   #+BEGIN_SRC emacs-lisp
     (set-frame-font "Hack 11")

     (tool-bar-mode -1)
     (menu-bar-mode -1)
     (blink-cursor-mode 0)
     (scroll-bar-mode 0)
     (tooltip-mode 0)

     (global-hl-line-mode 1)
   #+END_SRC
** Theme
  #+BEGIN_SRC emacs-lisp
    ;; (use-package kaolin-theme
    ;;   :init
    ;;   (setq kaolin-wave t)
    ;;   :config
    ;;   (load-theme 'kaolin t))

    (use-package darktooth-theme
      :config
      (load-theme 'darktooth t)
      (darktooth-modeline-two))

    ;; (use-package creamsody-theme
    ;;   :config
    ;;   (load-theme 'creamsody t)
    ;;   (creamsody-modeline-two))

    ;; (use-package oceanic-theme
    ;;   :config
    ;;   (load-theme 'oceanic))

    ;; (use-package doom-themes
    ;;   :config
    ;;   (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
    ;;         doom-themes-enable-italic t) ; if nil, italics is universally disabled
    ;;   (load-theme 'doom-tomorrow-night t)
    ;;   (doom-themes-org-config)

    ;;   (use-package solaire-mode
    ;;     :config
    ;;     ;; brighten buffers (that represent real files)
    ;;     (add-hook 'after-change-major-mode-hook #'turn-on-solaire-mode)

    ;;     ;; To enable solaire-mode unconditionally for certain modes:
    ;;     (add-hook 'ediff-prepare-buffer-hook #'solaire-mode)))

    ;; (use-package base16-theme
    ;;   :config
    ;;   (load-theme 'base16-onedark))

  #+END_SRC
** Modeline
   #+BEGIN_SRC emacs-lisp
     (use-package all-the-icons
        :demand
        :init
        (progn (defun -custom-modeline-github-vc ()
                 (let ((branch (mapconcat 'concat (cdr (split-string vc-mode "[:-]")) "-")))
                   (concat
                    (propertize (format " %s" (all-the-icons-octicon "git-branch"))
                                'face `(:height 1 :family ,(all-the-icons-octicon-family))
                                'display '(raise 0))
                    (propertize (format " %s" branch)))))

               (defun -custom-modeline-svn-vc ()
                 (let ((revision (cadr (split-string vc-mode "-"))))
                   (concat
                    (propertize (format " %s" (all-the-icons-faicon "cloud"))
                                'face `(:height 1)
                                'display '(raise 0))
                    (propertize (format " %s" revision) 'face `(:height 0.9)))))

               (defvar mode-line-my-vc
                 '(:propertize
                   (:eval (when vc-mode
                   (cond
                    ((string-match "Git[:-]" vc-mode) (-custom-modeline-github-vc))
                    ((string-match "SVN-" vc-mode) (-custom-modeline-svn-vc))
                    (t (format "%s" vc-mode)))))
                   face mode-line-directory)
                 "Formats the current directory.")

               ;; (setcar mode-line-position "")
               )
        :config
        (progn (setq-default mode-line-format
                             (list
                              " "
                              mode-line-mule-info
                              mode-line-modified
                              mode-line-frame-identification
                              mode-line-buffer-identification
                              "  "
                              mode-line-position
                              mode-line-my-vc))))

     ;; (set-face-attribute 'mode-line nil
     ;;                     :background "#282828"
     ;;                     :foreground "#7eb4ba"
     ;;                     :box '(:line-width 2 :color "#353535")
     ;;                     :overline nil
     ;;                     :underline nil)

     ;; (set-face-attribute 'mode-line-inactive nil
     ;;                     :background "#353535"
     ;;                     :foreground "#7eb4ba"
     ;;                     :box '(:line-width 2 :color "#353535")
     ;;                     :overline nil
     ;;                     :underline nil)

     (set-face-attribute 'mode-line nil :font "Hack-10")
     (set-face-attribute 'mode-line-inactive nil :font "Hack-10")

     (window-divider-mode t)
     (setq window-divider-default-right-width 4)

     (set-face-attribute 'window-divider nil :foreground "#504945")
     (set-face-attribute 'window-divider-first-pixel nil :foreground "#504945")
     (set-face-attribute 'window-divider-last-pixel nil :foreground "#504945")

     ;; ---------------------------------
     ;; ---------------------------------
     ;; ---------------------------------
     ;; ---------------------------------
     ;; ---------------------------------
     ;; ---------------------------------
     ;; ---------------------------------

     ;; (use-package all-the-icons)

     ;; (use-package telephone-line
     ;;   :after all-the-icons
     ;;   ;; :load-path "dev/telephone-line"
     ;;   :config
     ;;   ;; To create custom segments
     ;;   (use-package telephone-line-utils)

     ;;   ;; TODO:
     ;;   ;; TODO: choose separator by name
     ;;   (setq telephone-line-height 28)

     ;;   ;; Set default separators: choose either of them
     ;;   ;; (setq telephone-line-primary-left-separator 'telephone-line-flat)
     ;;   ;; (setq telephone-line-primary-right-separator 'telephone-line-flat)
     ;;   ;; OR
     ;;   (setq telephone-line-primary-left-separator 'telephone-line-identity-left)
     ;;   (setq telephone-line-primary-right-separator 'telephone-line-identity-right)
     ;;   ;; OR
     ;;   ;; (setq telephone-line-primary-left-separator 'telephone-line-cubed-left)
     ;;   ;; (setq telephone-line-primary-right-separator 'telephone-line-cubed-right)

     ;;   ;; Set subseparator
     ;;   (if window-system
     ;;       (progn
     ;;         (setq telephone-line-secondary-left-separator 'telephone-line-identity-hollow-left)
     ;;         (setq telephone-line-secondary-right-separator 'telephone-line-identity-hollow-right)))

     ;;   ;;;; Custom segments

     ;;   ;; Example of color string segment
     ;;   ;; (telephone-line-defsegment* my-color-segment
     ;;   ;;   (propertize "some-string" 'face `(:foreground "green")))


     ;;   ;; Display major mode
     ;;   ;; TODO: Rewrite using assoc and defvar #835d83
     ;;   (telephone-line-defsegment* my-major-mode-segment ()
     ;;     (let ((mode (cond
     ;;                   ((string= mode-name "Fundamental") "text")
     ;;                   ((string= mode-name "Emacs-Lisp") "elisp")
     ;;                   ((string= mode-name "Javascript-IDE") "js")
     ;;                   (t (downcase mode-name)))))
     ;;           ;; (icon (all-the-icons-icon-for-buffer)))
     ;;       ;; (concat
     ;;       ;;   (unless (symbolp icon) ;; This implies it's the major mode
     ;;       ;;     (format "%s "
     ;;       ;;             (propertize icon
     ;;       ;;                         'face `(:height 1.0 :family ,(all-the-icons-icon-family-for-buffer))
     ;;       ;;                         'display '(raise -0.1))))
     ;;       (propertize mode 'face `(:foreground "#9d81ba"))))
     ;;   ;; ;; Display name
     ;;   ;;   (propertize mode 'face `(:foreground "#9d81ba")))))

     ;;   ;; Display evil state
     ;;   (telephone-line-defsegment my-evil-segment ()
     ;;     (if (telephone-line-selected-window-active)
     ;;       (let ((tag (cond
     ;;                   ((string= evil-state "normal") ":")
     ;;                   ((string= evil-state "insert") ">")
     ;;                   ((string= evil-state "replace") "r")
     ;;                   ((string= evil-state "visual") "v")
     ;;                   ((string= evil-state "operator") "=")
     ;;                   ((string= evil-state "motion") "m")
     ;;                   ((string= evil-state "emacs") "Emacs")
     ;;                   (t "-"))))
     ;;         (concat " " tag))))

     ;;   ;; Display buffer name
     ;;   (telephone-line-defsegment my-buffer-segment ()
     ;;     `(""
     ;;       ,(telephone-line-raw mode-line-buffer-identification t)))


     ;;   ;; Display current position in a buffer
     ;;   (telephone-line-defsegment* my-position-segment ()
     ;;     (if (telephone-line-selected-window-active)
     ;;         (if (eq major-mode 'paradox-menu-mode)
     ;;             (telephone-line-trim (format-mode-line mode-line-front-space))
     ;;           '(" %3l,%2c "))))

     ;;   ;; Ignore some buffers in modeline
     ;;   (defvar modeline-ignored-modes nil
     ;;     "List of major modes to ignore in modeline")

     ;;   (setq modeline-ignored-modes '("Dashboard"
     ;;                                  "Warnings"
     ;;                                  "Compilation"
     ;;                                  "EShell"
     ;;                                  "REPL"
     ;;                                  "Messages"))

     ;;   ;; Display modified status
     ;;   (telephone-line-defsegment my-modified-status-segment ()
     ;;     (when (and (buffer-modified-p) (not (member mode-name modeline-ignored-modes)))
     ;;         (propertize "+" 'face `(:foreground "#85b654"))))


     ;;   ;; Display encoding system
     ;;   (telephone-line-defsegment my-coding-segment ()
     ;;     (let* ((code (symbol-name buffer-file-coding-system))
     ;;            (eol-type (coding-system-eol-type buffer-file-coding-system))
     ;;            (eol (cond
     ;;                  ((eq 0 eol-type) "unix")
     ;;                  ((eq 1 eol-type) "dos")
     ;;                  ((eq 2 eol-type) "mac")
     ;;                  (t ""))))
     ;;       (concat eol " ")))

     ;;   ;; Display current branch
     ;;   ;; TODO: move raise and etc into var
     ;;   (telephone-line-defsegment my-vc-segment ()
     ;;     ;; #6fb593 #4a858c
     ;;     (let ((fg-color "#6fb593")
     ;;           (backend (vc-backend buffer-file-name)))
     ;;       (format "%s %s"
     ;;         (propertize (all-the-icons-octicon "git-branch")
     ;;                     'face `(:family ,(all-the-icons-octicon-family) :height 1.0 :foreground ,fg-color)
     ;;                     'display '(raise 0.0))
     ;;         (propertize
     ;;          ;; TODO: fix error in the message buffer
     ;;          ;; wrong arrayp
     ;;           (substring vc-mode (+ (if (eq backend 'Hg) 2 3) 2))
     ;;           'face `(:foreground ,fg-color)))))

     ;;   ;; Left edge
     ;;   (setq telephone-line-lhs
     ;;         '((nil    . (my-buffer-segment))
     ;;           (nil    . (my-vc-segment))
     ;;           (nil    . (my-modified-status-segment))))

     ;;   ;; Right edge
     ;;   (setq telephone-line-rhs
     ;;         ;; '((nil     . ((my-vc-segment :active))))
     ;;         '((accent  . (my-position-segment))
     ;;           (nil     . (my-major-mode-segment))
     ;;           (accent  . ((my-coding-segment :active)))))

     ;;   (telephone-line-mode 1))
   #+END_SRC
** Ivy
   #+BEGIN_SRC emacs-lisp
     (use-package ivy
       :diminish (ivy-mode . "")
       :config
       (ivy-mode 1)
       ;; add ‘recentf-mode’ and bookmarks to ‘ivy-switch-buffer’.
       (setq ivy-use-virtual-buffers t)
       ;; number of result lines to display
       (setq ivy-height 10)
       ;; does not count candidates
       (setq ivy-count-format "")
       ;; no regexp by default
       (setq ivy-initial-inputs-alist nil)
       ;; configure regexp engine.
       (setq ivy-re-builders-alist
             ;; allow input not in order
             '((t   . ivy--regex-ignore-order))))

     (use-package counsel
       :after ivy
       :config
       (use-package counsel-projectile
           :after projectile)

       (use-package counsel-gtags))

   #+END_SRC
** Which-key
   #+BEGIN_SRC emacs-lisp
     (use-package which-key
       :init
       (setq which-key-idle-delay 0.2)
       (setq which-key-add-column-padding 1)
       :config
       (which-key-mode))
   #+END_SRC
** Dashboard
   #+BEGIN_SRC emacs-lisp
     (use-package dashboard
       :init
       (setq dashboard-items '((recents  . 5)
                               (projects . 5)))
       (setq dashboard-startup-banner 'logo)
       (setq dashboard-banner-logo-title "Welcome to Emacs!")
       :config
       (add-hook 'dashboard-mode-hook (lambda ()
                                        (nlinum-mode 0)
                                        ))
       (dashboard-setup-startup-hook))

   #+END_SRC
* Misc
** Rainbow delimeters
   #+BEGIN_SRC emacs-lisp
     (use-package rainbow-delimiters
       :config
       (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
   #+END_SRC
** Persistent undo history
   #+BEGIN_SRC emacs-lisp
     (setq undo-tree-auto-save-history t)
     (setq undo-tree-history-directory-alist '(("." . "~/.emacs.d/undo")))
   #+END_SRC
** Dumb jump
   #+BEGIN_SRC emacs-lisp
     (use-package dumb-jump) 
   #+END_SRC
** Zooming
   #+BEGIN_SRC emacs-lisp
     (use-package default-text-scale)
   #+END_SRC
** Highlight TODO and FIXME
   #+BEGIN_SRC emacs-lisp
     (use-package fic-mode
       :config
       (add-hook 'prog-mode-hook 'fic-mode))
   #+END_SRC
** Find other file (header/source)
   #+BEGIN_SRC emacs-lisp
     (use-package cff)
   #+END_SRC
** Shackle
   #+BEGIN_SRC emacs-lisp
     (use-package shackle
       :init
       (setq shackle-default-rule '(:same t)))
   #+END_SRC
** Eyebrowse
   #+BEGIN_SRC emacs-lisp
     (use-package eyebrowse
       :config
       (eyebrowse-mode t))
   #+END_SRC
** Electric pair mode
   #+BEGIN_SRC emacs-lisp
     (electric-pair-mode)
   #+END_SRC
** Other stuff
   #+BEGIN_SRC emacs-lisp
     (setq mouse-wheel-scroll-amount '(2 ((shift) . 2))) ;; one line at a time
     (setq mouse-wheel-progressive-speed nil) ;; don't accelerate scrolling
     (setq mouse-wheel-follow-mouse 't) ;; scroll window under mouse
     (setq scroll-step 1) ;; keyboard scroll one line at a time

     (setq-default indent-tabs-mode nil)

     ;; (setq show-paren-delay 0)
     ;; (show-paren-mode t)
     ;; (setq show-paren-style 'parenthesis)

     (add-hook 'prog-mode-hook #'hs-minor-mode)

     (setq-default fringes-outside-margins t)

     ;; Stop emacs from making a mess
     (setq auto-save-file-name-transforms
               `((".*" ,(concat user-emacs-directory "auto-save/") t))) 
     (setq backup-directory-alist
           `(("." . ,(expand-file-name
                     (concat user-emacs-directory "backups")))))

     (use-package nlinum
       :init
       (setq nlinum-highlight-current-line t)
       :config
       ;; (add-hook 'prog-mode-hook #'nlinum-mode)
       (defun nlinum-mode-margin-hook ()
         (when nlinum-mode
           (setq-local nlinum-format "%d ")))
       (add-hook 'nlinum-mode-hook #'nlinum-mode-margin-hook))

     (use-package evil-vimish-fold
       :after evil
       :config
       (evil-vimish-fold-mode 1))

     (use-package exec-path-from-shell
       :config
       (exec-path-from-shell-initialize))
   #+END_SRC
* Evil
  #+BEGIN_SRC emacs-lisp
    (use-package evil
      :init
      (setq evil-shift-width 2)
      :config
      (fset 'evil-visual-update-x-selection 'ignore)
      (evil-mode 1)

      (define-key evil-normal-state-map (kbd "C-h") 'evil-window-left)
        (define-key evil-normal-state-map (kbd "C-j") 'evil-window-down)
        (define-key evil-normal-state-map (kbd "C-k") 'evil-window-up)
        (define-key evil-normal-state-map (kbd "C-l") 'evil-window-right)

      (defun minibuffer-keyboard-quit ()
        "Abort recursive edit.
        In Delete Selection mode, if the mark is active, just deactivate it;
        then it takes a second \\[keyboard-quit] to abort the minibuffer."
        (interactive)
        (if (and delete-selection-mode transient-mark-mode mark-active)
          (setq deactivate-mark  t)
          (when (get-buffer "*Completions*") (delete-windows-on "*Completions*"))
          (abort-recursive-edit)))
      (define-key evil-normal-state-map [escape] 'keyboard-quit)
      (define-key evil-visual-state-map [escape] 'keyboard-quit)
      (define-key minibuffer-local-map [escape] 'minibuffer-keyboard-quit)
      (define-key minibuffer-local-ns-map [escape] 'minibuffer-keyboard-quit)
      (define-key minibuffer-local-completion-map [escape] 'minibuffer-keyboard-quit)
      (define-key minibuffer-local-must-match-map [escape] 'minibuffer-keyboard-quit)
      (define-key minibuffer-local-isearch-map [escape] 'minibuffer-keyboard-quit)
      (global-set-key [escape] 'evil-exit-emacs-state))
  #+END_SRC
** Evil leader
   #+BEGIN_SRC emacs-lisp
     (use-package evil-leader
       :after evil
       :config
       (global-evil-leader-mode)

       ; Overload shifts so that they don't lose the selection
       (define-key evil-visual-state-map (kbd ">") 'felipe/evil-shift-right-visual)
       (define-key evil-visual-state-map (kbd "<") 'felipe/evil-shift-left-visual)
       (define-key evil-visual-state-map [tab] 'felipe/evil-shift-right-visual)
       (define-key evil-visual-state-map [S-tab] 'felipe/evil-shift-left-visual)

       (evil-leader/set-leader felipe/leader-key)) 
   #+END_SRC
** Evil commentary
   #+BEGIN_SRC emacs-lisp
     (use-package evil-commentary
       :after evil
       :config
       (evil-commentary-mode))
   #+END_SRC
** Evil surround
   #+BEGIN_SRC emacs-lisp
     (use-package evil-surround
       :after evil
       :config
       (global-evil-surround-mode 1))
   #+END_SRC
* Projectile
  #+BEGIN_SRC emacs-lisp
    (use-package projectile)
  #+END_SRC
* Snippets
  #+BEGIN_SRC emacs-lisp
    (use-package yasnippet
      :init
      (setq yas-snippet-dirs
            '("~/.emacs.d/yasnippet-snippets"
              "~/.emacs.d/snippets"))
      :config
      (yas-global-mode 1))
  #+END_SRC
* Flycheck
  #+BEGIN_SRC emacs-lisp
    (use-package flycheck
      :init
      (setq flycheck-highlighting-mode 'symbols)
      (setq flycheck-indication-mode nil)
      (with-eval-after-load 'flycheck
        (setq-default flycheck-disabled-checkers '(emacs-lisp-checkdoc)))
      :config
      (global-flycheck-mode)
      (use-package flycheck-pos-tip
        :config
        (flycheck-pos-tip-mode)))
  #+END_SRC
* Company
  #+BEGIN_SRC emacs-lisp
    (use-package company
      :init
      (setq company-tooltip-align-annotations t)
      :config
      (global-company-mode))
  #+END_SRC
* Git
  #+BEGIN_SRC emacs-lisp
    (use-package magit)

    (use-package evil-magit
      :after magit)

    ;; (use-package git-gutter-fringe+
    ;;   :config
    ;;   ;; (global-git-gutter-mode +1)
    ;;   (git-gutter+-toggle-fringe)
    ;;   (when (display-graphic-p)
    ;;     ;; because git-gutter is in the left fringe
    ;;     ;; subtle diff indicators in the fringe
    ;;     ;; places the git gutter outside the margins.
    ;;     (setq-default fringes-outside-margins t)
    ;;     ;; thin fringe bitmaps
    ;;     (fringe-helper-define 'git-gutter-fr+:added '(center repeated)
    ;;       "XXX.....")
    ;;     (fringe-helper-define 'git-gutter-fr+:modified '(center repeated)
    ;;       "XXX.....")
    ;;     (fringe-helper-define 'git-gutter-fr+:deleted 'bottom
    ;;       "X......."
    ;;       "XX......"
    ;;       "XXX....."
    ;;       "XXXX....")))
  #+END_SRC
* Docker
  #+BEGIN_SRC emacs-lisp
    (use-package docker)
  #+END_SRC
* Languages
** LSP
   Language server protocol
   #+BEGIN_SRC emacs-lisp
     ;; (use-package lsp-mode
     ;;   :config
     ;;   (with-eval-after-load 'lsp-mode
     ;;       (require 'lsp-flycheck))
     ;;   (add-hook 'rust-mode #'lsp-mode))
   #+END_SRC
** Org
   #+BEGIN_SRC emacs-lisp
     (use-package org
       :config
       (setq org-src-fontify-natively t)
       (setq org-log-done 'time))

     (use-package org-bullets
       :after org
       :init
       (add-hook 'org-mode-hook (lambda ()
                                 ;; (nlinum-mode 0)
                                 (org-bullets-mode 1))))

     (use-package evil-org
       :after org)
   #+END_SRC
** Markdown
   #+BEGIN_SRC emacs-lisp
     (use-package markdown-mode)
   #+END_SRC
** Rust
   #+BEGIN_SRC emacs-lisp
     (use-package rust-mode
       ;; :after lsp-mode
       :config

       (use-package racer
         :after company
         :config
         (add-hook 'rust-mode-hook #'racer-mode)
         (add-hook 'racer-mode-hook #'eldoc-mode)
         (add-hook 'racer-mode-hook #'company-mode))

       (use-package flycheck-rust
         :after flycheck
         :config
         (add-hook 'flycheck-mode-hook #'flycheck-rust-setup))

       (define-key rust-mode-map (kbd "TAB") #'company-indent-or-complete-common)

       ;; (use-package lsp-rust)
       )

     (use-package cargo
       :after rust-mode
       :config
       (add-hook 'rust-mode-hook 'cargo-minor-mode))
   #+END_SRC
** Python
   #+BEGIN_SRC emacs-lisp
     (use-package elpy
       :config
       (elpy-enable)
       (when (require 'flycheck nil t)
         (setq elpy-modules (delq 'elpy-module-flymake elpy-modules))
         (add-hook 'elpy-mode-hook 'flycheck-mode))
       (setq elpy-modules (delete 'elpy-module-highlight-indentation elpy-modules)))

     ;; (use-package anaconda-mode
     ;;   :config
     ;;   (add-hook 'python-mode-hook 'anaconda-mode)
     ;;   (add-hook 'python-mode-hook 'anaconda-eldoc-mode))
   #+END_SRC
** Lua
   #+BEGIN_SRC emacs-lisp
     (use-package lua-mode
       :init
       (setq lua-indent-level 2)
       :config
       (use-package company-lua
         :after company
         :config
         (add-to-list 'company-backends 'company-lua)))
   #+END_SRC
** Javascript
   #+BEGIN_SRC emacs-lisp
    (use-package js2-mode
      :init
      (setq js2-highlight-level 3)
      :config
      (add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode)))
   #+END_SRC
** C/C++
   #+BEGIN_SRC emacs-lisp
     ;; (use-package rtags
     ;;   :init
     ;;   (setq rtags-autostart-diagnostics t)
     ;;   (setq rtags-completions-enabled t)
     ;;   :config
     ;;   (use-package company-rtags
     ;;     :config
     ;;     (push 'company-rtags company-backends))
     ;;   (use-package flycheck-rtags
     ;;     :config
     ;;     (defun my-flycheck-rtags-setup ()
     ;;       (flycheck-select-checker 'rtags)
     ;;       (setq-local flycheck-highlighting-mode nil) ;; RTags creates more accurate overlays.
     ;;       (setq-local flycheck-check-syntax-automatically nil))
     ;;     (add-hook 'c-mode-hook #'my-flycheck-rtags-setup)
     ;;     (add-hook 'c++-mode-hook #'my-flycheck-rtags-setup))
     ;;   (use-package ivy-rtags
     ;;     :init
     ;;     (setq rtags-display-result-backend 'ivy)))

     (use-package irony
       :after evil-leader
       :config
       (add-hook 'c++-mode-hook 'irony-mode)
       (add-hook 'c-mode-hook 'irony-mode)
       (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options)

       ;; (setq-default irony-cdb-compilation-databases '(irony-cdb-clang-complete))
       ;; (setq irony-additional-clang-options '("-std=c++14"))

       (use-package flycheck-irony
         :after flycheck
         :config
         (add-hook 'flycheck-mode-hook #'flycheck-irony-setup))

       (use-package company-irony
         :after company
         :config
         (add-to-list 'company-backends 'company-irony))

       (use-package irony-eldoc))


     (use-package clang-format)

     (add-to-list 'auto-mode-alist '("\\.h\\'" . c++-mode))
   #+END_SRC
** Haskell
   #+BEGIN_SRC emacs-lisp
    (use-package intero
      :config
      (add-hook 'haskell-mode-hook 'intero-mode))
   #+END_SRC
** Emacs lisp
   #+BEGIN_SRC emacs-lisp
    (use-package elisp-format)
   #+END_SRC
** Typescript
   #+BEGIN_SRC emacs-lisp
    (use-package tide
      :after company
      :config
      (defun setup-tide-mode ()
        (interactive)
        (tide-setup))

      ;; formats the buffer before saving
      (add-hook 'before-save-hook 'tide-format-before-save)

      (add-hook 'typescript-mode-hook #'setup-tide-mode))
   #+END_SRC
** Web languages (markup, etc)
   #+BEGIN_SRC emacs-lisp
    (use-package web-mode)
    (use-package pug-mode)
    (use-package scss-mode)
   #+END_SRC
** GLSL
   #+BEGIN_SRC emacs-lisp
    (use-package glsl-mode
      :config
      (add-to-list 'auto-mode-alist '("\\.vsh\\'" . glsl-mode))
      (add-to-list 'auto-mode-alist '("\\.fsh\\'" . glsl-mode))
      (add-to-list 'auto-mode-alist '("\\.glslf\\'" . glsl-mode))
      (add-to-list 'auto-mode-alist '("\\.glslv\\'" . glsl-mode)))
   #+END_SRC
** Go
   #+BEGIN_SRC emacs-lisp
     (use-package go-mode
       :config
       (setq gofmt-command "goimports")
       (add-hook 'before-save-hook 'gofmt-before-save)
       (use-package company-go
         :config
         (add-hook 'go-mode-hook (lambda ()
                                   (set (make-local-variable 'company-backends) '(company-go))
                                   (company-mode))))
       (use-package go-eldoc
         :config
         (add-hook 'go-mode-hook 'go-eldoc-setup)))
   #+END_SRC
** Nim
   #+BEGIN_SRC emacs-lisp
     (use-package nim-mode
       :init
       (setq nim-nimsuggest-path "~/.nim/bin/nimsuggest")
       :config
       (defconst flycheck-nimsuggest-error-parser 'flycheck-nimsuggest-error-parser)
       (add-hook 'nim-mode-hook 'nimsuggest-mode)
       (add-hook 'nim-mode-hook 'company-mode)
       (add-hook 'nimscript-mode-hook 'company-mode))
   #+END_SRC
** Dockerfile
   #+BEGIN_SRC emacs-lisp
     (use-package dockerfile-mode)
   #+END_SRC
* Writing
  Provides a distraction free writing mode.
  #+BEGIN_SRC emacs-lisp
    (use-package olivetti)
  #+END_SRC
* Indentation
  #+BEGIN_SRC emacs-lisp
    (add-hook 'rust-mode-hook
      (function (lambda ()
        (setq tab-width 4)
        (setq evil-shift-width 4))))

    (add-hook 'go-mode-hook
      (function (lambda ()
        (setq tab-width 8)
        (setq evil-shift-width 8))))

    (add-hook 'python-mode-hook
      (function (lambda ()
        (setq tab-width 4)
        (setq evil-shift-width 4))))

    (add-hook 'emacs-lisp-mode-hook
      (function (lambda ()
        (setq tab-width 2)
        (setq evil-shift-width 2))))

    (add-hook 'typescript-mode-hook
      (function (lambda ()
        (setq tab-width 4)
        (setq evil-shift-width 4))))

    (add-hook 'js2-mode-hook
      (function (lambda ()
        (setq js2-basic-offset 2)
        (setq js-indent-level 2)
        (setq evil-shift-width 2))))

    (add-hook 'js-mode-hook
      (function (lambda ()
        (setq js2-basic-offset 2)
        (setq js-indent-level 2)
        (setq evil-shift-width 2))))

    (add-hook 'c++-mode
      (function (lambda ()
        (setq tab-width 2)
        (setq c-basic-offset 2)
        (setq evil-shift-width 2))))

    (add-hook 'c-mode
      (function (lambda ()
        (setq tab-width 2)
        (setq c-basic-offset 2)
        (setq evil-shift-width 2))))

    (add-hook 'lua-mode
      (function (lambda ()
        (setq tab-width 2)
        (setq evil-shift-width 2))))
  #+END_SRC
* Keybinds
** Map ESC to cancel (C-g)
   #+BEGIN_SRC emacs-lisp
     (define-key isearch-mode-map [escape] 'isearch-abort)   ;; isearch
     (define-key isearch-mode-map "\e" 'isearch-abort)   ;; \e seems to work better for terminals
     (global-set-key [escape] 'keyboard-escape-quit)         ;; everywhere else
   #+END_SRC
** Core bindings
   #+BEGIN_SRC emacs-lisp
     (felipe/name-bind "T" "theme/toggles")
     (felipe/bind "Tt" 'counsel-load-theme "themes")
     (felipe/bind "Tn" 'nlinum-mode "toggle line numbers")

     (felipe/name-bind "z" "zoom")
     (felipe/bind "zz" 'text-scale-adjust "adjust zoom")
     (felipe/bind "zi" 'text-scale-increase "zoom in")
     (felipe/bind "zo" 'text-scale-decrease "zoom out")

     (felipe/name-bind "f" "files")
     (felipe/bind "ff" 'counsel-find-file "find file")
     (felipe/bind "fb" 'hs-toggle-hiding "toggle fold")
     (felipe/name-bind "fe" "edit")
     (felipe/bind "fed" 'felipe/edit-config "edit config")
     (felipe/bind "fet" 'felipe/edit-todo "edit todo")
     (felipe/bind "fer" 'felipe/reload-config "reload config")

     (felipe/name-bind "b" "buffer")
     (felipe/bind "bb" 'ivy-switch-buffer "find buffer")
     (felipe/bind "bd" 'kill-this-buffer "delete buffer")
     (felipe/bind "bn" 'next-buffer "next buffer")
     (felipe/bind "bp" 'previous-buffer "previous buffer")

     (felipe/name-bind "w" "window")
     (felipe/bind "w/" 'split-window-right "split right")
     (felipe/bind "w-" 'split-window-below "split below")
     (felipe/bind "wd" 'delete-window "delete window")

     (felipe/name-bind "e" "error")
     (felipe/bind "en" 'flycheck-next-error "next error")
     (felipe/bind "ep" 'flycheck-previous-error "previous error")

     (felipe/name-bind "p" "projectile")
     (felipe/bind "pp" 'counsel-projectile-switch-project "switch project")
     (felipe/bind "pf" 'counsel-projectile "find file")
     (felipe/bind "pg" 'counsel-git-grep "git grep")

     (felipe/name-bind "m" "major mode")
     (felipe/name-bind "mr" "run/refactor")
     (felipe/name-bind "mg" "go")
     (felipe/bind "mgg" 'dumb-jump-go "goto def")
     (felipe/bind "mgG" 'dumb-jump-go-other-window "goto def in other window")

     (felipe/name-bind "g" "git")
     (felipe/bind "gg" 'magit-status "status")
     (felipe/bind "gc" 'magit-commit "commit")
     (felipe/bind "gp" 'magit-push "push")
     (felipe/bind "gs" 'magit-stage "stage")
     (felipe/bind "gU" 'magit-unstage "unstage")
   #+END_SRC
** Org mode
   #+BEGIN_SRC emacs-lisp
     (felipe/name-bind-mode "mi" "insert" 'org-mode)
     (felipe/bind-mode "mih" 'org-insert-heading-respect-content "heading" 'org-mode)
     (felipe/bind-mode "mis" 'org-insert-subheading "subheading" 'org-mode)
     (felipe/bind-mode "mii" 'org-insert-item "item" 'org-mode)
     (felipe/bind-mode "mil" 'org-insert-link "link" 'org-mode)

     (felipe/bind-mode "mm" 'org-ctrl-c-ctrl-c "C-c C-c" 'org-mode)
     
     (felipe/bind-mode "mt" 'org-todo "todo" 'org-mode)
   #+END_SRC
** Rust
   #+BEGIN_SRC emacs-lisp
     (felipe/bind-mode "mb" 'cargo-process-build "cargo build" 'rust-mode)
     (felipe/bind-mode "mr" 'cargo-process-run "cargo run" 'rust-mode)
     (felipe/bind-mode "mf" 'rust-format-buffer "format" 'rust-mode)
   #+END_SRC
** Lua
   #+BEGIN_SRC emacs-lisp
     (felipe/bind-mode "mrr" '(lambda ()
                    (interactive)
                    (let ((app-root (locate-dominating-file (buffer-file-name) "main.lua")))
                      (shell-command (format "love %s &" app-root))))
                       "run love game" 'lua-mode)
   #+END_SRC
** C/C++
   #+BEGIN_SRC emacs-lisp
     (felipe/bind-mode "mf" 'clang-format-buffer "format" 'c++-mode)
     (felipe/bind-mode "ms" 'cff-find-other-file "switch file" 'c++-mode)

     (felipe/bind-mode "mf" 'clang-format-buffer "format" 'c-mode)
     (felipe/bind-mode "ms" 'cff-find-other-file "switch file" 'c-mode)
   #+END_SRC
** Typescript
   #+BEGIN_SRC emacs-lisp
     (felipe/bind-mode "mf" 'tide-format "format" 'typescript-mode)
     (felipe/bind-mode "mgg" 'tide-goto-reference "go to reference" 'typescript-mode)
     (felipe/bind-mode "mrs" 'tide-rename-symbol "rename Symbol" 'typescript-mode)
   #+END_SRC
** Go
   #+BEGIN_SRC emacs-lisp
     (felipe/bind-mode "mf" 'gofmt "format" 'go-mode)
     (felipe/bind-mode "mi" 'go-import-add "add imports" 'go-mode)
   #+END_SRC
** Python
   #+BEGIN_SRC emacs-lisp
     (felipe/bind-mode "mf" 'elpy-format-code "format" 'python-mode)
     (felipe/bind-mode "mi" 'elpy-importmagic-fixup "fix imports" 'python-mode)
     (felipe/bind-mode "md" 'elpy-doc "show documentation" 'python-mode)
     (felipe/bind-mode "mgd" 'elpy-goto-definition "go to definition" 'python-mode)
   #+END_SRC
* Startup
  #+BEGIN_SRC emacs-lisp
    ;; (find-file "~/todo.org")
  #+END_SRC
  
