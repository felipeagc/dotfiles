#+STARTUP: overview
#+TITLE: Felipe's emacs configuration
#+CREATOR: Felipe

* My stuff
** Leader key
   #+BEGIN_SRC emacs-lisp
     (setq felipe/leader-key "<SPC>")
   #+END_SRC
** Keyboard helpers
   #+BEGIN_SRC emacs-lisp
     (defun felipe/name-bind (keycombo name)
       (interactive)
       (which-key-add-key-based-replacements (concat felipe/leader-key keycombo) name))

     (defun felipe/bind (keycombo command name)
       (interactive)
       (evil-leader/set-key keycombo command)
       (felipe/name-bind keycombo name))

     (defun felipe/name-bind-mode (keycombo name mode)
       (which-key-add-major-mode-key-based-replacements mode (concat felipe/leader-key keycombo) name))

     (defun felipe/bind-mode (keycombo command name mode)
       (evil-leader/set-key-for-mode mode keycombo command)
       (felipe/name-bind-mode keycombo name mode))
   #+END_SRC
** Keyboard commands
   #+BEGIN_SRC emacs-lisp
     (defun felipe/switch-to-buffer (buffer)
       "Switch to a buffer but doesn't open a new window if it's already open in another one."
       (let (result)
         (progn
           (dolist (window (window-list) result)
             (when (equal buffer (window-buffer window))
               (progn
                 (select-window window)
                 (setq result t))))
           (when (not result) (switch-to-buffer buffer)))))

     (setq felipe/dark-theme t)

     (defun felipe/toggle-dark-theme ()
       "Toggle between light and dark themes."
       (interactive)
       (if felipe/dark-theme
           (progn
             (load-theme 'kaolin-light t)
             (setq felipe/dark-theme nil))
         (progn
           (load-theme 'kaolin-dark t)
           (setq felipe/dark-theme t))))

     (defun felipe/user-buffer-q ()
       "Return t if current buffer is a user buffer, else nil.
     Typically, if buffer name starts with *, it's not considered a user buffer.
     This function is used by buffer switching command and close buffer command, so that next buffer shown is a user buffer.
     You can override this function to get your idea of “user buffer”.
     version 2016-06-18"
       (interactive)
       (not (or (string-equal "*" (substring (buffer-name) 0 1))
                (string-equal major-mode "dired-mode")
                (string-prefix-p "magit" (buffer-name)))))

     (defun felipe/next-user-buffer ()
       "Switch to the next user buffer.
     “user buffer” is determined by `xah-user-buffer-q'.
     URL `http://ergoemacs.org/emacs/elisp_next_prev_user_buffer.html'
     Version 2016-06-19"
       (interactive)
       (next-buffer)
       (let ((i 0))
         (while (< i 20)
           (if (not (felipe/user-buffer-q))
               (progn (next-buffer)
                      (setq i (1+ i)))
             (progn (setq i 100))))))

     (defun felipe/previous-user-buffer ()
       "Switch to the previous user buffer.
     “user buffer” is determined by `xah-user-buffer-q'.
     URL `http://ergoemacs.org/emacs/elisp_next_prev_user_buffer.html'
     Version 2016-06-19"
       (interactive)
       (previous-buffer)
       (let ((i 0))
         (while (< i 20)
           (if (not (felipe/user-buffer-q))
               (progn (previous-buffer)
                      (setq i (1+ i)))
             (progn (setq i 100))))))

   #+END_SRC
* Evil
** Evil mode
  #+BEGIN_SRC emacs-lisp
    (use-package evil
      :ensure t
      :init
      (setq evil-want-integration nil)
      :config
      (evil-mode 1)

      (define-key evil-normal-state-map (kbd "C-h") 'evil-window-left)
      (define-key evil-normal-state-map (kbd "C-j") 'evil-window-down)
      (define-key evil-normal-state-map (kbd "C-k") 'evil-window-up)
      (define-key evil-normal-state-map (kbd "C-l") 'evil-window-right)

      ;; Overload shifts so that they don't lose the selection
      (defun felipe/evil-shift-left-visual ()
        (interactive)
        (evil-shift-left (region-beginning) (region-end))
        (evil-normal-state)
        (evil-visual-restore))

      (defun felipe/evil-shift-right-visual ()
        (interactive)
        (evil-shift-right (region-beginning) (region-end))
        (evil-normal-state)
        (evil-visual-restore))

      (define-key evil-visual-state-map (kbd ">") 'felipe/evil-shift-right-visual)
      (define-key evil-visual-state-map (kbd "<") 'felipe/evil-shift-left-visual)
      (define-key evil-visual-state-map [tab] 'felipe/evil-shift-right-visual)
      (define-key evil-visual-state-map [S-tab] 'felipe/evil-shift-left-visual)

      (defun minibuffer-keyboard-quit ()
        "Abort recursive edit.
         In Delete Selection mode, if the mark is active, just deactivate it;
         then it takes a second \\[keyboard-quit] to abort the minibuffer."
        (interactive)
        (if (and delete-selection-mode transient-mark-mode mark-active)
            (setq deactivate-mark  t)
          (when (get-buffer "*Completions*") (delete-windows-on "*Completions*"))
          (abort-recursive-edit)))

      (define-key evil-normal-state-map [escape] 'keyboard-quit)
      (define-key evil-visual-state-map [escape] 'keyboard-quit)
      (define-key minibuffer-local-map [escape] 'minibuffer-keyboard-quit)
      (define-key minibuffer-local-ns-map [escape] 'minibuffer-keyboard-quit)
      (define-key minibuffer-local-completion-map [escape] 'minibuffer-keyboard-quit)
      (define-key minibuffer-local-must-match-map [escape] 'minibuffer-keyboard-quit)
      (define-key minibuffer-local-isearch-map [escape] 'minibuffer-keyboard-quit)
      (global-set-key [escape] 'evil-exit-emacs-state))
  #+END_SRC
** Evil surround
   #+BEGIN_SRC emacs-lisp
     (use-package evil-surround
       :ensure t
       :after evil
       :config
       (global-evil-surround-mode 1))
   #+END_SRC
** Evil commentary
   #+BEGIN_SRC emacs-lisp
     (use-package evil-commentary
       :ensure t
       :after evil
       :config
       (evil-commentary-mode))
   #+END_SRC
** Evil leader
   #+BEGIN_SRC emacs-lisp
     (use-package evil-leader
       :ensure t
       :after evil
       :config
       (evil-leader/set-leader felipe/leader-key)
       (global-evil-leader-mode))
   #+END_SRC
** Evil collection
   #+BEGIN_SRC emacs-lisp
     (use-package evil-collection
       :after evil
       :ensure t
       :config
       (evil-collection-init))
   #+END_SRC
* Ivy/counsel
  #+BEGIN_SRC emacs-lisp
    (use-package ivy
      :ensure t
      :config
      (ivy-mode 1))

    (use-package counsel
      :ensure t
      :after ivy
      :init
      (setq counsel-find-file-ignore-regexp
	    (concat
	     ;; File names beginning with # or .
	     "\\(?:\\`[#.]\\)"
	     ;; File names ending with # or ~
	     "\\|\\(?:\\`.+?[#~]\\'\\)"))
      :config
      (use-package counsel-projectile
	:ensure t
	:after projectile
	:config
	(counsel-projectile-mode)))
  #+END_SRC
* Interface
** All the icons
   #+BEGIN_SRC emacs-lisp
     (use-package all-the-icons
       :ensure t
       :init
       (setq inhibit-compacting-font-caches t))
   #+END_SRC
** Hide UI elements
   #+BEGIN_SRC emacs-lisp
     (menu-bar-mode -1)
     (tool-bar-mode -1)
     (scroll-bar-mode -1)
     (blink-cursor-mode 0)

   #+END_SRC
   
   The following bit is to fix scroll bars being shown in emacsclient
   #+BEGIN_SRC emacs-lisp
     (defun felipe/disable-scroll-bars (frame)
       (modify-frame-parameters frame
				'((vertical-scroll-bars . nil)
				  (horizontal-scroll-bars . nil))))
     (add-hook 'after-make-frame-functions 'felipe/disable-scroll-bars)
   #+END_SRC
** Font
   #+BEGIN_SRC emacs-lisp
     (setq felipe/fonts '("SF Mono:semibold"
			  "Iosevka"
			  "Hack"))

     (defun felipe/font-exists-p (font)
      "Check if font exists"
      (if (null (x-list-fonts font)) nil t))

     (defun felipe/set-fonts (fonts)
      "Sets the default font based on a list of fonts"
      (let ((selected-font (pop fonts)))
	(if (felipe/font-exists-p selected-font)
	    (progn
	      (setq default-frame-alist `((font . ,selected-font)))
	      (set-frame-font selected-font nil t))
	  (felipe/set-fonts fonts))))

     (setq felipe/are-fonts-setup nil)

     (add-hook 'focus-in-hook '(lambda ()
				 (if (not felipe/are-fonts-setup)
				     (progn
				       (setq felipe/are-fonts-setup t)
				       (felipe/set-fonts felipe/fonts))
				   nil)))


     (setq default-font-size-pt 11)

     (defun felipe/font-size-adj (&optional arg)
       (interactive "p")
       (if (= arg 0)
	   (setq font-size-pt default-font-size-pt)
	 (setq font-size-pt (+ font-size-pt arg)))
       ;; The internal font size value is 10x the font size in points unit.
       ;; So a 10pt font size is equal to 100 in internal font size value.
       (set-face-attribute 'default nil :height (* font-size-pt 10)))

     (defun felipe/font-size-incr ()  (interactive) (felipe/font-size-adj +1))
     (defun felipe/font-size-decr ()  (interactive) (felipe/font-size-adj -1))
     (defun felipe/font-size-reset () (interactive) (felipe/font-size-adj 0))

     (felipe/font-size-reset)
   #+END_SRC
** Theming
   #+BEGIN_SRC emacs-lisp
     (use-package kaolin-themes
       :ensure t
       :config
       (load-theme 'kaolin-dark t))
   #+END_SRC
** Modeline
   #+BEGIN_SRC emacs-lisp
     (use-package telephone-line
       :ensure t
       :init
       ;; Need to display telephone-line in *Messages* buffer
       (defun recreate-message-buffer ()
         (cl-flet ((buffer-string* (buffer)
                                   (with-current-buffer buffer
                                     (buffer-string))))
           (let ((msg (buffer-string* "*Messages*")))
             (kill-buffer "*Messages*")
             (message msg))))

       (add-hook 'after-init-hook #'recreate-message-buffer)

       :config
       ;; To create custom segments
       (require 'telephone-line-utils)

       ;; Set subseparator
       (if window-system
           (progn
             (setq telephone-line-secondary-left-separator
                   'telephone-line-identity-hollow-left)
             (setq telephone-line-secondary-right-separator
                   'telephone-line-identity-hollow-right)))

       (telephone-line-defsegment my-evil-segment ()
         (if (telephone-line-selected-window-active)
             (let ((tag (cond
                         ((string= evil-state "normal")    ":")
                         ((string= evil-state "insert")    ">")
                         ((string= evil-state "replace")   "r")
                         ((string= evil-state "visual")    "!")
                         ((string= evil-state "operator")  "=")
                         ((string= evil-state "motion")    "m")
                         ((string= evil-state "emacs")     "Emacs")
                         (t "-"))))
               (concat " " tag))))

       (telephone-line-defsegment my-buffer-segment ()
         `(""
           ,(telephone-line-raw mode-line-buffer-identification t)))

       ;; Display current position in a buffer
       (telephone-line-defsegment* my-position-segment ()
         (if (telephone-line-selected-window-active)
             (if (eq major-mode 'paradox-menu-mode)
                 (telephone-line-trim (format-mode-line mode-line-front-space))
               '(" %3l,%2c "))))
       ;; Exclude some buffers in modeline
       (defvar modeline-ignored-modes nil
         "List of major modes to ignore in modeline")

       (setq modeline-ignored-modes '("Dashboard"
                                      "Warnings"
                                      "Compilation"
                                      "EShell"
                                      "Debugger"
                                      "Quickrun"
                                      "REPL"
                                      "IELM"
                                      "Messages"))

       ;; Display modified status
       (telephone-line-defsegment my-modified-status-segment ()
         (when (and (buffer-modified-p) (not (member mode-name modeline-ignored-modes)) (not buffer-read-only))
           (propertize "+" 'face `(:foreground "#85b654"))))

       ;; Display read-only status
       (telephone-line-defsegment my-read-only-status-segment ()
         (when buffer-read-only
           ;; (propertize "ro" 'face `(:foreground "#dbac66"))
           (propertize (all-the-icons-octicon "key")
                       'face `(:family ,(all-the-icons-octicon-family) :height 1.0 :foreground "dim gray")
                       'display '(raise 0.0))))

       ;; Display encoding system
       (telephone-line-defsegment my-coding-segment ()
         (let* ((code (symbol-name buffer-file-coding-system))
                (eol-type (coding-system-eol-type buffer-file-coding-system))
                (eol (cond
                      ((eq 0 eol-type) "unix")
                      ((eq 1 eol-type) "dos")
                      ((eq 2 eol-type) "mac")
                      (t "-"))))
           (concat eol " ")))

       ;; TODO:
       ;; Hide vc backend in modeline
       (defadvice vc-mode-line (after strip-backend () activate)
         (when (stringp vc-mode)
           (let ((my-vc (replace-regexp-in-string "^ Git." "" vc-mode)))
             (setq vc-mode my-vc))))

       ;; Display current branch
       ;; TODO: move raise and etc into var
       (telephone-line-defsegment my-vc-segment ()
         ;; #6fb593 #4a858c
         (let (
               ;; (fg-color "#6fb593") ; kaolin-dark
               ;; (fg-color "#9f84ae")) ; kaolin-galaxy
               ;; (fg-color "#709688")) ; kaolin-eclipse
               (fg-color "#68f3ca")) ; kaolin-aurora
           (when vc-mode
             ;; double format to prevent warnings in '*Messages*' buffer
             (format "%s %s"
                     (propertize (all-the-icons-octicon "git-branch")
                                 'face `(:family ,(all-the-icons-octicon-family) :height 1.0 :foreground ,fg-color)
                                 'display '(raise 0.0))
                     (propertize
                      (format "%s"
                              (telephone-line-raw vc-mode t))
                      'face `(:foreground ,fg-color))))))


       (defun column-num-at-pos (pos)
         (save-excursion
           (goto-char pos)
           (current-column)))

       (telephone-line-defsegment selection-info ()
         "Information about the size of the current selection, when applicable.
       Supports both Emacs and Evil cursor conventions."
         (when (or mark-active
                   (and (bound-and-true-p evil-local-mode)
                        (eq 'visual evil-state)))
           (let* ((lines (count-lines (region-beginning) (min (1+ (region-end)) (point-max))))
                  (chars (- (1+ (region-end)) (region-beginning)))
                  (cols (1+ (abs (- (column-num-at-pos (region-end))
                                    (column-num-at-pos (region-beginning))))))
                  (evil (and (bound-and-true-p evil-state) (eq 'visual evil-state)))
                  (rect (or (bound-and-true-p rectangle-mark-mode)
                            (and evil (eq 'block evil-visual-selection))))
                  (multi-line (or (> lines 1) (and evil (eq 'line evil-visual-selection)))))
             (cond
              (rect (format "%d×%d" lines (if evil cols (1- cols))))
              (multi-line (format "%dL" lines))
              (t (format "%d" (if evil chars (1- chars))))))))


       (telephone-line-defsegment my-flycheck-segment ()
         ;; TODO: split errors and warnings
         (when (boundp 'flycheck-last-status-change)
           (pcase flycheck-last-status-change
             ('finished (if flycheck-current-errors
                            (let-alist (flycheck-count-errors flycheck-current-errors)
                              (let ((sum (+ (or .error 0) (or .warning 0))))
                                (format " %s: %s"
                                        (if .error "errors" "warnings")
                                        (number-to-string sum))))
                          ;; TODO:
                          " succeed"))
             ('running     " working...")
             ('no-checker  "")
             ('errored     " error")
             ('interrupted " interrupted"))))

       (setq telephone-line-primary-left-separator 'telephone-line-cubed-left)
       (setq telephone-line-primary-right-separator 'telephone-line-cubed-right)

       ;; Set mode-line height
       (setq telephone-line-height 26)

       ;; Left edge
       ;; TODO: gray background for buffer and mode segment in inactive line
       (setq telephone-line-lhs
             '((evil   . (my-evil-segment))
               (nil    . (my-buffer-segment))
               (nil    . (my-modified-status-segment))
               (nil    . (my-read-only-status-segment))
               ;; (nil    . (my-flycheck-segment))
               (nil    . (selection-info))))
       ;; Right edge
       (setq telephone-line-rhs
             '((nil    . (my-vc-segment))
               (accent . (my-position-segment))
               (nil    . (telephone-line-major-mode-segment))
               (accent . ((my-coding-segment :active))))) 

       (telephone-line-mode 1))
   #+END_SRC
** Shackle
   #+BEGIN_SRC emacs-lisp
     (use-package shackle
       :ensure t)
   #+END_SRC
** Which key
   #+BEGIN_SRC emacs-lisp
     (use-package which-key
       :ensure t
       :config
       (which-key-mode)) 
   #+END_SRC
** Neotree
   #+BEGIN_SRC emacs-lisp
     (use-package neotree
       :ensure t)
   #+END_SRC
* Misc
** Disable unwanted buffers
   #+BEGIN_SRC emacs-lisp
     ;; (setq-default message-log-max nil)
     ;; (kill-buffer "*Messages*")
   #+END_SRC
** Better yes/no questions in emacs
   This makes emacs accept only y/n as answers.
   #+BEGIN_SRC emacs-lisp
     (fset 'yes-or-no-p 'y-or-n-p)
   #+END_SRC
** Electric pairs
   #+BEGIN_SRC emacs-lisp
     (electric-pair-mode)
   #+END_SRC
** Rainbow delimeters
   #+BEGIN_SRC emacs-lisp
     (use-package rainbow-delimiters
       :ensure t
       :config
       (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
   #+END_SRC
** Smooth scrolling
   #+BEGIN_SRC emacs-lisp
     (setq scroll-margin 10
	   scroll-conservatively 0
	   scroll-up-aggressively 0.01
	   scroll-down-aggressively 0.01)
     (setq-default scroll-up-aggressively 0.01
		   scroll-down-aggressively 0.01)
   #+END_SRC
** Change backup/autosave default directories
   This will stop emacs from making files like =#this#= and =this~= all over the place
   #+BEGIN_SRC emacs-lisp
     (setq backup-directory-alist         '(("." . "~/.emacs.d/backups"))
	   auto-save-file-name-transforms '((".*" "~/.emacs.d/autosaves/\\1" t)))

     (make-directory "~/.emacs.d/autosaves/" t)
   #+END_SRC
** Editorconfig
   #+BEGIN_SRC emacs-lisp
     (use-package editorconfig
       :ensure t
       :config
       (editorconfig-mode 1))
   #+END_SRC
** Shell-pop
   #+BEGIN_SRC emacs-lisp
     (use-package shell-pop
       :ensure t
       :init
       (setq shell-pop-window-position "bottom"
             shell-pop-window-size 20
             shell-pop-shell-type '("ansi-term" "*ansi-term*" (lambda nil (ansi-term shell-pop-term-shell)))))
   #+END_SRC
** Pixelwise resizing
   #+BEGIN_SRC emacs-lisp
     (setq frame-resize-pixelwise t)
   #+END_SRC
** Dumb jump
   #+BEGIN_SRC emacs-lisp
     (use-package dumb-jump
       :ensure t
       :config
       (dumb-jump-mode))
   #+END_SRC
** Zeal at point
   Zeal is a documentation browser and this package allows it to integrate with emacs.
   #+BEGIN_SRC emacs-lisp
     (use-package zeal-at-point
       :ensure t)
   #+END_SRC
** Make zoom work for all buffers
   #+BEGIN_SRC emacs-lisp
     (defadvice text-scale-increase (around all-buffers (arg) activate)
       (dolist (buffer (buffer-list))
         (with-current-buffer buffer
           ad-do-it)))
   #+END_SRC
** Reduce scrolling lag
   #+BEGIN_SRC emacs-lisp
     (setq auto-window-vscroll nil)
   #+END_SRC
** Beacon
   #+BEGIN_SRC emacs-lisp
     (use-package beacon
       :ensure t
       :config
       (beacon-mode 1))
   #+END_SRC
** Restart emacs
   #+BEGIN_SRC emacs-lisp
     (use-package restart-emacs
       :ensure t
       :init
       (setq restart-emacs-restore-frames nil))
   #+END_SRC
** Find other file
   #+BEGIN_SRC emacs-lisp
     (use-package cff
       :ensure t)
   #+END_SRC
* Cool stuff
** Hacker news
   #+BEGIN_SRC emacs-lisp
     (use-package hackernews
       :ensure t)
   #+END_SRC
* Version control
** Magit
  #+BEGIN_SRC emacs-lisp
    (use-package magit
      :ensure t)

    (use-package evil-magit
      :ensure t
      :after magit)
  #+END_SRC
** Git gutter
   #+BEGIN_SRC emacs-lisp
     (use-package git-gutter-fringe
       :ensure t
       :config
       (global-git-gutter-mode +1)

       (setq-default fringes-outside-margins t)
       ;; thin fringe bitmaps
       (fringe-helper-define 'git-gutter-fr:added '(center repeated)
	 "XXX.....")
       (fringe-helper-define 'git-gutter-fr:modified '(center repeated)
	 "XXX.....")
       (fringe-helper-define 'git-gutter-fr:deleted 'bottom
	 "X......."
	 "XX......"
	 "XXX....."
	 "XXXX...."))
   #+END_SRC
* Flycheck
  #+BEGIN_SRC emacs-lisp
    (use-package flycheck
      :ensure t
      :config
      (global-flycheck-mode)) 

    (use-package flycheck-pos-tip
      :ensure t
      :after flycheck
      :config
      (setq flycheck-pos-tip-timeout 60)
      (flycheck-pos-tip-mode))
  #+END_SRC
* Company
  #+BEGIN_SRC emacs-lisp
    (use-package company
      :ensure t
      :config
      (define-key company-active-map (kbd "M-n") nil)
      (define-key company-active-map (kbd "M-p") nil)
      (define-key company-active-map (kbd "C-n") #'company-select-next)
      (define-key company-active-map (kbd "C-p") #'company-select-previous)
      (global-company-mode))
  #+END_SRC
* Snippets
  #+BEGIN_SRC emacs-lisp
    (use-package yasnippet
      :ensure t
      :config
      (yas-global-mode 1))

    (use-package yasnippet-snippets
      :ensure t
      :after yasnippet)
  #+END_SRC
* Org
  #+BEGIN_SRC emacs-lisp
    (setq org-src-fontify-natively t)
  #+END_SRC
** Org TWBS
   #+BEGIN_SRC emacs-lisp
    (use-package ox-twbs
      :ensure t)
   #+END_SRC
** Org bulltes
   #+BEGIN_SRC emacs-lisp
     ;; (use-package org-bullets
     ;;   :ensure t
     ;;   :config
     ;;   (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
   #+END_SRC
** Org capture
   #+BEGIN_SRC emacs-lisp
     (setq org-default-notes-file "~/nextcloud/notes.org")

     (setq org-capture-templates
           '(("t" "To-do" entry (file+headline "~/nextcloud/notes.org" "To-do")
              "* TODO %?")))
   #+END_SRC
** Org projectile
   #+BEGIN_SRC emacs-lisp
     (use-package org-projectile
       :ensure t
       :after projectile
       :bind (("C-c n p" . org-projectile-project-todo-completing-read)
              ("C-c c" . org-capture))
       :config
       (org-projectile-per-project)
       (setq org-projectile-per-project-filepath "todo.org")
       (setq org-agenda-files (append org-agenda-files (org-projectile-todo-files)))
       (push (org-projectile-project-todo-entry) org-capture-templates))
   #+END_SRC
* Projectile
  #+BEGIN_SRC emacs-lisp
    (use-package projectile
      :ensure t
      :init
      ;; (setq projectile-require-project-root nil)
      :config
      (projectile-global-mode))
  #+END_SRC
* Languages
** LSP
   #+BEGIN_SRC emacs-lisp
     (use-package lsp-mode
       :ensure t
       :after flycheck
       :init
       (setq lsp-highlight-symbol-at-point nil)
       :config
       (use-package lsp-ui
	 :ensure t
	 :init
	 (setq lsp-ui-sideline-enable nil)
	 :config
	 (add-hook 'lsp-mode-hook 'lsp-ui-mode))
       (use-package company-lsp
	 :ensure t
	 :after company
	 :init
	 (setq company-lsp-async t)
	 :config
	 (push 'company-lsp company-backends)))
   #+END_SRC
** Emacs lisp
   #+BEGIN_SRC emacs-lisp
     (add-hook 'emacs-lisp-mode-hook
               (lambda ()
                 (setq indent-tabs-mode nil)
                 (setq tab-width 2)
                 (setq evil-shift-width 2)))

     (felipe/bind-mode "me" 'eval-last-sexp "eval last sexp" 'elisp-mode)
   #+END_SRC
** DONE Rust
   #+BEGIN_SRC emacs-lisp
     (use-package rust-mode
       :ensure t)

     (use-package lsp-rust
       :ensure t
       :after lsp-mode
       :init
       (setq lsp-rust-rls-command '("rustup" "run" "stable" "rls"))
       :config
       (add-hook 'rust-mode-hook #'lsp-rust-enable)
       (add-hook 'rust-mode-hook #'flycheck-mode))

     (felipe/bind-mode "mf" 'rust-format-buffer "format" 'rust-mode)
     (evil-define-key 'normal rust-mode-map "gd" 'xref-find-definitions)
     (evil-define-key 'normal rust-mode-map "gD" 'xref-find-definitions-other-window)
   #+END_SRC
** TODO C/C++
   #+BEGIN_SRC emacs-lisp
     (setq felipe/cquery-enabled nil)

     (use-package cquery
       :ensure t
       :init
       (setq cquery-executable "/usr/bin/cquery")
       :config
       (defun felipe/cquery-hook ()
	 (when (and felipe/cquery-enabled
		    (not (eq major-mode 'glsl-mode)))
	   (lsp-cquery-enable)))
       (add-hook 'c-mode-common-hook 'felipe/cquery-hook))

     (use-package clang-format
       :ensure t)

     (use-package meson-mode
       :ensure t
       :config
       (add-hook 'meson-mode-hook 'company-mode))

     (add-hook 'c++-mode-hook
	       (lambda ()
		 (setq tab-width 2)
		 (setq indent-tabs-mode nil)
		 (setq evil-shift-width 2)))

     (add-hook 'c-mode-hook
	       (lambda ()
		 (setq tab-width 2)
		 (setq indent-tabs-mode nil)
		 (setq evil-shift-width 2)))

     (defun felipe/toggle-cquery ()
       (interactive)
       (if felipe/cquery-enabled
	   (progn
		   (setq felipe/cquery-enabled nil)
		   (lsp-mode 0))
	 (progn
	   (setq felipe/cquery-enabled t)
	   (felipe/cquery-hook))))

     (felipe/bind-mode "mT" 'felipe/toggle-cquery "toggle cquery" 'c++-mode)
     (felipe/bind-mode "mf" 'clang-format-buffer "format" 'c++-mode)
     (felipe/bind-mode "mf" 'clang-format-buffer "format" 'c-mode)
     (felipe/bind-mode "mh" 'cquery-member-hierarchy "format" 'c-mode)
     (felipe/bind-mode "mh" 'cquery-member-hierarchy "format" 'c++-mode)
     (evil-define-key 'normal c++-mode-map "gd" 'xref-find-definitions)
     (evil-define-key 'normal c-mode-map "gd" 'xref-find-definitions)
   #+END_SRC
** TODO Haskell
   #+BEGIN_SRC emacs-lisp
     (use-package intero
       :ensure t
       :config
       (add-hook 'haskell-mode-hook 'intero-mode))
   #+END_SRC
** DONE Python
   #+BEGIN_SRC emacs-lisp
     (use-package elpy
       :ensure t
       :config
       (add-hook 'elpy-mode-hook (lambda () (highlight-indentation-mode -1)))
       (elpy-enable))

     (felipe/bind-mode "mf" 'elpy-format-code "format" 'python-mode)
     (evil-define-key 'normal python-mode-map "K" 'elpy-doc)
     (evil-define-key 'normal python-mode-map "gd" 'elpy-goto-definition)
     (evil-define-key 'normal python-mode-map "gD" 'elpy-goto-definition-other-window)
   #+END_SRC
** TODO Clojure
   #+BEGIN_SRC emacs-lisp
     (use-package clojure-mode
       :ensure t)

     (use-package cider
       :ensure t
       :init
       (setq nrepl-hide-special-buffers t))

     (felipe/name-bind-mode "me" "eval" 'clojure-mode)
     (felipe/bind-mode "meb" 'cider-eval-buffer "eval buffer" 'clojure-mode)
     (felipe/bind-mode "mea" 'cider-eval-all-files "eval all files" 'clojure-mode)
     (felipe/bind-mode "ms" 'cider-jack-in "start repl" 'clojure-mode)
     (felipe/bind-mode "mr" 'cider-switch-to-repl-buffer "repl buffer" 'clojure-mode)
     (felipe/bind-mode "mt" 'cider-test-run-project-tests "run project tests" 'clojure-mode)
     (felipe/bind-mode "mf" 'cider-format-buffer "format" 'clojure-mode)
     (evil-define-key 'normal clojure-mode-map "K" 'cider-doc)
   #+END_SRC
** TODO Elixir
   #+BEGIN_SRC emacs-lisp
     (use-package alchemist
       :ensure t)
   #+END_SRC
** DONE Go
   #+BEGIN_SRC emacs-lisp
     (use-package go-mode
       :ensure t
       :config
       (use-package go-eldoc
         :ensure t
         :config
         (add-hook 'go-mode-hook 'go-eldoc-setup)))

     (use-package company-go
       :ensure t
       :after company)

     (felipe/bind-mode "mf" 'gofmt "format" 'go-mode)
     (felipe/bind-mode "mi" 'go-import-add "add imports" 'go-mode)
     (evil-define-key 'normal go-mode-map "K" 'godoc-at-point)
     (evil-define-key 'normal go-mode-map "gd" 'godef-jump)
     (evil-define-key 'normal go-mode-map "gD" 'godef-jump-other-window)
   #+END_SRC
** TODO Nim
   #+BEGIN_SRC emacs-lisp
     (use-package nim-mode
       :ensure t
       :config
       (add-hook 'nim-mode-hook 'nimsuggest-mode))
   #+END_SRC
** C#
   #+BEGIN_SRC emacs-lisp
     (use-package csharp-mode
       :ensure t)

     (use-package omnisharp
       :ensure t
       :after company
       :config
       (add-hook 'csharp-mode-hook 'omnisharp-mode)
       (add-to-list 'company-backends 'company-omnisharp)
       (add-hook 'csharp-mode-hook #'company-mode)
       (add-hook 'csharp-mode-hook #'flycheck-mode))
   #+END_SRC
** Web
   #+BEGIN_SRC emacs-lisp
     (use-package web-mode
       :ensure t)
   #+END_SRC
** Javascript & Typescript
   #+BEGIN_SRC emacs-lisp
     (setq js-indent-level 2)

     (add-hook 'js-mode-hook
	       (lambda ()
		 (setq indent-tabs-mode nil)
		 (setq tab-width 2)
		 (setq evil-shift-width 2)))

     (use-package tide
       :ensure t
       :config
       (defun setup-tide-mode ()
	 (interactive)
	 (tide-setup)
	 (flycheck-mode +1)
	 ;; (setq flycheck-check-syntax-automatically '(save mode-enabled))
	 (eldoc-mode +1)
	 (tide-hl-identifier-mode +1)
	 (company-mode +1))

       ;; aligns annotation to the right hand side
       (setq company-tooltip-align-annotations t)

       ;; formats the buffer before saving
       ;; (add-hook 'before-save-hook 'tide-format-before-save)
       (add-hook 'js-mode-hook #'setup-tide-mode)
       ;; configure javascript-tide checker to run after your default javascript checker
       (flycheck-add-next-checker 'javascript-eslint 'javascript-tide 'append)

       (add-hook 'typescript-mode-hook #'setup-tide-mode))


     (felipe/bind-mode "mf" 'tide-format "format" 'js-mode)
     (felipe/bind-mode "mr" 'tide-rename-symbol "rename symbol" 'js-mode)
     (evil-define-key 'normal js-mode-map "K" 'tide-documentation-at-point)
     (evil-define-key 'normal js-mode-map "gd" 'xref-find-definitions)
     (evil-define-key 'normal js-mode-map "gD" 'xref-find-definitions-other-window)

     (felipe/bind-mode "mf" 'tide-format "format" 'typescript-mode)
     (felipe/bind-mode "mr" 'tide-rename-symbol "rename symbol" 'typescript-mode)
     (evil-define-key 'normal typescript-mode-map "K" 'tide-documentation-at-point)
     (evil-define-key 'normal typescript-mode-map "gd" 'xref-find-definitions)
     (evil-define-key 'normal typescript-mode-map "gD" 'xref-find-definitions-other-window)
   #+END_SRC
** Lua
   #+BEGIN_SRC emacs-lisp
     (use-package lua-mode
       :ensure t
       :init
       (setq lua-indent-level 2))

     (felipe/bind-mode "mr" #'(lambda ()
                                (interactive)
                                (shell-command (concat "love " (projectile-project-root))))
                       "run game" 'lua-mode)

   #+END_SRC
** GLSL
   #+BEGIN_SRC emacs-lisp
     (use-package glsl-mode
       :ensure t
       :config
       (autoload 'glsl-mode "glsl-mode" nil t)
       (add-to-list 'auto-mode-alist '("\\.glsl\\'" . glsl-mode))
       (add-to-list 'auto-mode-alist '("\\.glslf\\'" . glsl-mode))
       (add-to-list 'auto-mode-alist '("\\.glslv\\'" . glsl-mode))
       (add-to-list 'auto-mode-alist '("\\.vert\\'" . glsl-mode))
       (add-to-list 'auto-mode-alist '("\\.frag\\'" . glsl-mode))
       (add-to-list 'auto-mode-alist '("\\.geom\\'" . glsl-mode)))
   #+END_SRC
** Godot
   #+BEGIN_SRC emacs-lisp
     (use-package gdscript-mode
       :ensure t)
   #+END_SRC
** YAML
   #+BEGIN_SRC emacs-lisp
     (use-package yaml-mode
       :ensure t)
   #+END_SRC
* Keyboard
** Make ESC actually escape stuff
   #+BEGIN_SRC emacs-lisp
     (define-key isearch-mode-map [escape] 'isearch-abort)   ;; isearch
     (define-key isearch-mode-map "\e" 'isearch-abort)       ;; \e seems to work better for terminals
     (global-set-key [escape] 'keyboard-escape-quit)         ;; everywhere else
   #+END_SRC
** Zoom with mouse scroll
   #+BEGIN_SRC emacs-lisp
     (global-set-key [C-mouse-4] 'felipe/font-size-incr)
     (global-set-key [C-mouse-5] 'felipe/font-size-decr)
   #+END_SRC
** Zoom keybinds
   #+BEGIN_SRC emacs-lisp
     (define-key global-map (kbd "C-=") 'felipe/font-size-incr)
     (define-key global-map (kbd "C--") 'felipe/font-size-decr)
     (define-key global-map (kbd "C-0") 'felipe/font-size-reset)
   #+END_SRC
** Dumb jump bindings
   #+BEGIN_SRC emacs-lisp
     (evil-global-set-key 'normal "gd" 'dumb-jump-go)
     (evil-global-set-key 'normal "gD" 'dumb-jump-go-other-window)
   #+END_SRC
** Leader mappings
*** Misc
    #+BEGIN_SRC emacs-lisp
      (felipe/bind "a" 'cff-find-other-file "find other file")
    #+END_SRC
*** Terminal
    #+BEGIN_SRC emacs-lisp
      (felipe/bind "'" 'shell-pop "terminal")
    #+END_SRC
*** Toggles
    #+BEGIN_SRC emacs-lisp
      (felipe/name-bind "t" "theme/toggles")
      (felipe/bind "tt" 'counsel-load-theme "themes")
      (felipe/bind "td" 'felipe/toggle-dark-theme "toggle dark theme")
    #+END_SRC
*** Files
    #+BEGIN_SRC emacs-lisp
      (felipe/name-bind "f" "files")
      (felipe/bind "ff" 'counsel-find-file "find file")
      (felipe/name-bind "fe" "edit")
      (felipe/bind "fed" '(lambda ()
                            (interactive)
                            (find-file "~/.emacs.d/config.org")) "emacs config")
      (felipe/bind "fei" '(lambda ()
                            (interactive)
                            (find-file "~/.config/i3/config")) "i3 config")
      (felipe/bind "fec" '(lambda ()
                            (interactive)
                            (find-file "~/.config/compton.conf")) "compton config")
      (felipe/bind "fep" '(lambda ()
                            (interactive)
                            (find-file "~/.config/polybar/config")) "polybar config")
      (felipe/bind "fen" '(lambda ()
                            (interactive)
                            (find-file "~/nextcloud/notes.org")) "notes")
    #+END_SRC
*** Buffers
    #+BEGIN_SRC emacs-lisp
      (felipe/name-bind "b" "buffer")
      (felipe/bind "bb" 'ivy-switch-buffer "find buffer")
      (felipe/bind "bd" 'kill-this-buffer "delete buffer")
      (felipe/bind "br" 'rename-buffer "rename buffer")
      (felipe/bind "bn" 'felipe/next-user-buffer "next buffer")
      (felipe/bind "bp" 'felipe/previous-user-buffer "previous buffer")
      (felipe/bind "bs" '(lambda ()
                           (interactive)
                           (switch-to-buffer "*scratch*")) "scratch buffer")
      (felipe/bind "bcc" '(lambda ()
                            (interactive)
                            (mapcar (lambda (buffer)
                                      (let ((safe-buffers (list "*scratch*" "*Messages*" "config.org"))
                                            (name (buffer-name buffer)))
                                        (unless (or
                                                 (string-prefix-p "*Org" name)
                                                 (member name safe-buffers))
                                          (kill-buffer buffer)))) (buffer-list))) "clean buffers")
    #+END_SRC
*** Window
    #+BEGIN_SRC emacs-lisp
      (felipe/name-bind "w" "window")
      (felipe/bind "w/" 'split-window-right "split right")
      (felipe/bind "w-" 'split-window-below "split below")
      (felipe/bind "wd" 'delete-window "delete window")
      (felipe/bind "wb" 'balance-windows "balance windows")
    #+END_SRC
*** Errors
    #+BEGIN_SRC emacs-lisp
      (felipe/name-bind "e" "error")
      (felipe/bind "en" 'flycheck-next-error "next error")
      (felipe/bind "ep" 'flycheck-previous-error "previous error")
    #+END_SRC
*** Ivy
    #+BEGIN_SRC emacs-lisp
      (felipe/name-bind "i" "ivy")
      (felipe/bind "ir" 'ivy-resume "ivy resume")
    #+END_SRC
*** Refactoring
    #+BEGIN_SRC emacs-lisp
      (felipe/name-bind "r" "refactor")
      (felipe/bind "rs" 'replace-string "replace string")
    #+END_SRC
*** Projectile
    #+BEGIN_SRC emacs-lisp
      (felipe/name-bind "p" "projectile")
      (felipe/bind "pp" 'projectile-switch-project "switch project")
      (felipe/bind "pa" 'projectile-add-known-project "add project")
      (felipe/bind "pf" 'counsel-projectile-find-file "find file")
      (felipe/bind "pg" 'counsel-projectile-rg "grep")
      (felipe/bind "pt" 'org-projectile-capture-for-current-project "org-capture task")
    #+END_SRC
*** Git
    #+BEGIN_SRC emacs-lisp
      (felipe/name-bind "g" "git")
      (felipe/bind "gg" 'magit-status "status")
      (felipe/bind "gc" 'magit-commit "commit")
      (felipe/bind "gp" 'magit-push "push")
      (felipe/bind "gs" 'magit-stage "stage")
      (felipe/bind "gU" 'magit-unstage "unstage")
    #+END_SRC
*** Org
    #+BEGIN_SRC emacs-lisp
      (felipe/name-bind "o" "org")
      (felipe/bind "oc" 'org-capture "capture")
    #+END_SRC

*** Major mode
    #+BEGIN_SRC emacs-lisp
      (felipe/name-bind "m" "major mode")
      (felipe/name-bind "mr" "run/refactor")
      (felipe/name-bind "mf" "format")
      (felipe/name-bind "mg" "go")
    #+END_SRC
*** Quitting
    #+BEGIN_SRC emacs-lisp
      (felipe/name-bind "q" "quit")
      (felipe/bind "qr" 'restart-emacs "restart emacs/server")
      (felipe/bind "qq" 'save-buffers-kill-emacs "quit emacs/server")
    #+END_SRC
