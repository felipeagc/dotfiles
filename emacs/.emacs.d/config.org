* GC hack
  Makes emacs start up a bit faster
  #+BEGIN_SRC emacs-lisp
  (setq gc-cons-threshold 100000000)
  #+END_SRC
* Setup package management
  #+BEGIN_SRC emacs-lisp
  (when (>= emacs-major-version 24)
    (setq-default
    load-prefer-newer t
    package-enable-at-startup nil)
    (package-initialize)
    (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/") t)
    (unless (package-installed-p 'use-package)
      (package-refresh-contents)
      (package-install 'use-package)))

  (setq use-package-always-ensure t)
  #+END_SRC
* Start server
  Starts the emacs server so we can use =emacsclient= to open files in the running instance.
  #+BEGIN_SRC emacs-lisp
    (require 'server)
    (unless (server-running-p)
      (server-start))
  #+END_SRC
* Custom definitions
** Properties
   #+BEGIN_SRC emacs-lisp
     (setq inhibit-splash-screen t)
     (setq inhibit-startup-message t)
     (setq felipe/leader-key "<SPC>")
   #+END_SRC
** Keybinding
   #+BEGIN_SRC emacs-lisp
    (defun felipe/name-bind (keycombo name)
      (interactive)
      (which-key-add-key-based-replacements (concat felipe/leader-key keycombo) name))

    (defun felipe/bind (keycombo command name)
      (interactive)
      (evil-leader/set-key keycombo command)
      (felipe/name-bind keycombo name))

    (defun felipe/name-bind-mode (keycombo name mode)
      (which-key-add-major-mode-key-based-replacements mode (concat felipe/leader-key keycombo) name))

    (defun felipe/bind-mode (keycombo command name mode)
      (evil-leader/set-key-for-mode mode keycombo command)
      (felipe/name-bind-mode keycombo name mode))
   #+END_SRC
** Functions
   #+BEGIN_SRC emacs-lisp
     (defun felipe/edit-todo()
       "Go to the todo file"
       (interactive)
       (find-file "~/todo.org"))

     (defun felipe/edit-config()
       "Edit the configuration file"
       (interactive)
       (find-file "~/.emacs.d/config.org"))

     (defun felipe/reload-config()
       "Reload the configuration file."
       (interactive)
       (load-file "~/.emacs.d/init.el")
       (evil-leader-mode)
       (felipe/edit-config))

     (defun felipe/set-font-size (size)
       "Changes the font size"
       (interactive (list (string-to-number (read-from-minibuffer "Font size: "))))
       (set-face-attribute 'default nil :height (* 10 size)))

     (defun set-internal-border (n)
       "Set or reset the internal border width N of the selected frame."
       (interactive (list (string-to-number (read-from-minibuffer "Border width: "))))
       (let ((w (or n 0)))
         (set-frame-parameter
          (selected-frame)
          'internal-border-width
          w)))
   #+END_SRC
** Evil
   These are used to modify evil's indent shift behavior
   #+BEGIN_SRC emacs-lisp
     (defun felipe/evil-shift-left-visual ()
       (interactive)
       (evil-shift-left (region-beginning) (region-end))
       (evil-normal-state)
       (evil-visual-restore))

     (defun felipe/evil-shift-right-visual ()
       (interactive)
       (evil-shift-right (region-beginning) (region-end))
       (evil-normal-state)
       (evil-visual-restore))
   #+END_SRC
* Projectile
  #+BEGIN_SRC emacs-lisp
    (use-package projectile)
  #+END_SRC
* UI
** Setup
   Set the font, hide toolbars, etc.
   #+BEGIN_SRC emacs-lisp
     (set-frame-font "Ubuntu Mono-13:spacing=50")
     (set-face-attribute 'mode-line nil :font "Ubuntu Mono-13:spacing=50")


     (tool-bar-mode -1)
     (menu-bar-mode -1)
     (blink-cursor-mode 0)
     (scroll-bar-mode 0)
     (tooltip-mode 0)

     (global-hl-line-mode 1)
   #+END_SRC
** Theme
  #+BEGIN_SRC emacs-lisp
    ;; (use-package kaolin-theme
    ;;   :init
    ;;   (setq kaolin-wave t)
    ;;   :config
    ;;   (load-theme 'kaolin t))

    ;; (use-package darktooth-theme
    ;;   :config
    ;;   (load-theme 'darktooth t)
    ;;   (darktooth-modeline-two))

    ;; (use-package xresources-theme)

    ;; (use-package creamsody-theme
    ;;   :config
    ;;   (load-theme 'creamsody t)
    ;;   (creamsody-modeline-two))

    ;; (use-package oceanic-theme
    ;;   :config
    ;;   (load-theme 'oceanic))

    (use-package doom-themes
      :config
      (setq doom-themes-enable-bold nil    ; if nil, bold is universally disabled
            doom-themes-enable-italic t) ; if nil, italics is universally disabled
      (load-theme 'doom-one t)
      (doom-themes-org-config))



    ;;   (use-package solaire-mode
    ;;     :config
    ;;     ;; brighten buffers (that represent real files)
    ;;     (add-hook 'after-change-major-mode-hook #'turn-on-solaire-mode)

    ;;     ;; To enable solaire-mode unconditionally for certain modes:
    ;;     (add-hook 'ediff-prepare-buffer-hook #'solaire-mode)))

    ;; (use-package base16-theme
    ;;   :config
    ;;   (load-theme 'base16-onedark))

  #+END_SRC
** Modeline
   #+BEGIN_SRC emacs-lisp
     (use-package all-the-icons)
     (use-package dash)

     (defun doom--resolve-hooks (hooks)
       (cl-loop with quoted-p = (eq (car-safe hooks) 'quote)
                for hook in (doom-enlist (doom-unquote hooks))
                if (eq (car-safe hook) 'quote)
                 collect (cadr hook)
                else if quoted-p
                 collect hook
     else collect (intern (format "%s-hook" (symbol-name hook)))))

     (defun doom-enlist (exp)
       "Return EXP wrapped in a list, or as-is if already a list."
       (if (listp exp) exp (list exp)))

     (defun doom-unquote (exp)
       "Return EXP unquoted."
       (while (memq (car-safe exp) '(quote function))
         (setq exp (cadr exp)))
     exp)

     (defmacro add-hook! (&rest args)
       "A convenience macro for `add-hook'. Takes, in order:
       1. Optional properties :local and/or :append, which will make the hook
          buffer-local or append to the list of hooks (respectively),
       2. The hooks: either an unquoted major mode, an unquoted list of major-modes,
          a quoted hook variable or a quoted list of hook variables. If unquoted, the
          hooks will be resolved by appending -hook to each symbol.
       3. A function, list of functions, or body forms to be wrapped in a lambda.
     Examples:
         (add-hook! 'some-mode-hook 'enable-something)
         (add-hook! some-mode '(enable-something and-another))
         (add-hook! '(one-mode-hook second-mode-hook) 'enable-something)
         (add-hook! (one-mode second-mode) 'enable-something)
         (add-hook! :append (one-mode second-mode) 'enable-something)
         (add-hook! :local (one-mode second-mode) 'enable-something)
         (add-hook! (one-mode second-mode) (setq v 5) (setq a 2))
         (add-hook! :append :local (one-mode second-mode) (setq v 5) (setq a 2))
     Body forms can access the hook's arguments through the let-bound variable
     `args'."
       (declare (indent defun) (debug t))
       (let ((hook-fn 'add-hook)
             append-p local-p)
         (while (keywordp (car args))
           (pcase (pop args)
             (:append (setq append-p t))
             (:local  (setq local-p t))
             (:remove (setq hook-fn 'remove-hook))))
         (let ((hooks (doom--resolve-hooks (pop args)))
               (funcs
                (let ((val (car args)))
                  (if (memq (car-safe val) '(quote function))
                      (if (cdr-safe (cadr val))
                          (cadr val)
                        (list (cadr val)))
                    (list args))))
               forms)
           (dolist (fn funcs)
             (setq fn (if (symbolp fn)
                          `(function ,fn)
                        `(lambda (&rest _) ,@args)))
             (dolist (hook hooks)
               (push (cond ((eq hook-fn 'remove-hook)
                            `(remove-hook ',hook ,fn ,local-p))
                           (t
                            `(add-hook ',hook ,fn ,append-p ,local-p)))
                     forms)))
     `(progn ,@(nreverse forms)))))


     (defmacro def-modeline-segment! (name &rest forms)
       "Defines a modeline segment and byte compiles it."
       (declare (indent defun) (doc-string 2))
       (let ((sym (intern (format "doom-modeline-segment--%s" name))))
         `(progn
            (defun ,sym () ,@forms)
            ,(unless (bound-and-true-p byte-compile-current-file)
               `(let (byte-compile-warnings)
                  (byte-compile #',sym))))))

     (defsubst doom--prepare-modeline-segments (segments)
       (cl-loop for seg in segments
                if (stringp seg)
                 collect seg
                else
                 collect (list (intern (format "doom-modeline-segment--%s" (symbol-name seg))))))

     (defmacro def-modeline! (name lhs &optional rhs)
       "Defines a modeline format and byte-compiles it. NAME is a symbol to identify
     it (used by `doom-modeline' for retrieval). LHS and RHS are lists of symbols of
     modeline segments defined with `def-modeline-segment!'.
     Example:
       (def-modeline! minimal
         (bar matches \" \" buffer-info)
         (media-info major-mode))
       (doom-set-modeline 'minimal t)"
       (let ((sym (intern (format "doom-modeline-format--%s" name)))
             (lhs-forms (doom--prepare-modeline-segments lhs))
             (rhs-forms (doom--prepare-modeline-segments rhs)))
         `(progn
            (defun ,sym ()
              (let ((lhs (list ,@lhs-forms))
                    (rhs (list ,@rhs-forms)))
                (let ((rhs-str (format-mode-line rhs)))
                  (list lhs
                        (propertize
                         " " 'display
                         `((space :align-to (- (+ right right-fringe right-margin)
                                               ,(+ 1 (string-width rhs-str))))))
                        rhs-str))))
            ,(unless (bound-and-true-p byte-compile-current-file)
               `(let (byte-compile-warnings)
                  (byte-compile #',sym))))))

     (defun doom-modeline (key)
       "Returns a mode-line configuration associated with KEY (a symbol). Throws an
     error if it doesn't exist."
       (let ((fn (intern (format "doom-modeline-format--%s" key))))
         (when (functionp fn)
           `(:eval (,fn)))))

     (defun doom-set-modeline (key &optional default)
       "Set the modeline format. Does nothing if the modeline KEY doesn't exist. If
     DEFAULT is non-nil, set the default mode-line for all buffers."
       (-when-let (modeline (doom-modeline key))
         (setf (if default
                   (default-value 'mode-line-format)
                 (buffer-local-value 'mode-line-format (current-buffer)))
     modeline)))

     ;; anzu and evil-anzu expose current/total state that can be displayed in the
     ;; mode-line.
     (use-package evil-anzu
       :when (featurep 'evil)
       :init
       (add-transient-hook! #'evil-ex-start-search (require 'evil-anzu))
       :config
       (setq anzu-cons-mode-line-p nil
             anzu-minimum-input-length 1
             anzu-search-threshold 250)

       ;; Avoid anzu conflicts across buffers
       (mapc #'make-variable-buffer-local
             '(anzu--total-matched anzu--current-position anzu--state
               anzu--cached-count anzu--cached-positions anzu--last-command
               anzu--last-isearch-string anzu--overflow-p))

       ;; Ensure anzu state is cleared when searches & iedit are done
       (add-hook 'isearch-mode-end-hook #'anzu--reset-status t)
       (add-hook '+evil-esc-hook #'anzu--reset-status t)
       (add-hook 'iedit-mode-end-hook #'anzu--reset-status))


     ;; Keep `+doom-modeline-current-window' up-to-date
     (defvar +doom-modeline-current-window (frame-selected-window))
     (defun +doom-modeline|set-selected-window (&rest _)
       "Sets `+doom-modeline-current-window' appropriately"
       (let ((win (frame-selected-window)))
         (unless (minibuffer-window-active-p win)
           (setq +doom-modeline-current-window win))))

     (add-hook 'window-configuration-change-hook #'+doom-modeline|set-selected-window)
     (add-hook 'focus-in-hook #'+doom-modeline|set-selected-window)
     (advice-add #'handle-switch-frame :after #'+doom-modeline|set-selected-window)
     (advice-add #'select-window :after #'+doom-modeline|set-selected-window)

     ;; fish-style modeline
     (use-package shrink-path
       :commands (shrink-path-prompt shrink-path-file-mixed))


     ;;
     ;; Variables
     ;;

     (defvar +doom-modeline-height 40
       "How tall the mode-line should be (only respected in GUI emacs).")

     (defvar +doom-modeline-bar-width 3
       "How wide the mode-line bar should be (only respected in GUI emacs).")

     (defvar +doom-modeline-vspc
       (propertize " " 'face 'variable-pitch)
       "TODO")

     (defvar +doom-modeline-buffer-file-name-style 'truncate-upto-project
       "Determines the style used by `+doom-modeline-buffer-file-name'.
     Given ~/Projects/FOSS/emacs/lisp/comint.el
     truncate-upto-project => ~/P/F/emacs/lisp/comint.el
     truncate-upto-root => ~/P/F/e/lisp/comint.el
     truncate-all => ~/P/F/e/l/comint.el
     relative-to-project => lisp/comint.el
     file-name => comint.el")

     ;; externs
     (defvar anzu--state nil)
     (defvar evil-mode nil)
     (defvar evil-state nil)
     (defvar evil-visual-selection nil)
     (defvar iedit-mode nil)
     (defvar all-the-icons-scale-factor)
     (defvar all-the-icons-default-adjust)


     ;;
     ;; Custom faces
     ;;

     (defgroup +doom-modeline nil
       ""
       :group 'doom)

     (defface doom-modeline-buffer-path
       '((t (:inherit mode-line-emphasis :bold t)))
       "Face used for the dirname part of the buffer path."
       :group '+doom-modeline)

     (defface doom-modeline-buffer-file
       '((t (:inherit mode-line-buffer-id)))
       "Face used for the filename part of the mode-line buffer path."
       :group '+doom-modeline)

     (defface doom-modeline-buffer-modified
       '((t (:inherit error :background nil :bold t)))
       "Face used for the 'unsaved' symbol in the mode-line."
       :group '+doom-modeline)

     (defface doom-modeline-buffer-major-mode
       '((t (:inherit mode-line-emphasis :bold t)))
       "Face used for the major-mode segment in the mode-line."
       :group '+doom-modeline)

     (defface doom-modeline-highlight
       '((t (:inherit mode-line-emphasis)))
       "Face for bright segments of the mode-line."
       :group '+doom-modeline)

     (defface doom-modeline-panel
       '((t (:inherit mode-line-highlight)))
       "Face for 'X out of Y' segments, such as `+doom-modeline--anzu', `+doom-modeline--evil-substitute' and
     `iedit'"
       :group '+doom-modeline)

     (defface doom-modeline-info
       `((t (:inherit success :bold t)))
       "Face for info-level messages in the modeline. Used by `*vc'."
       :group '+doom-modeline)

     (defface doom-modeline-warning
       `((t (:inherit warning :bold t)))
       "Face for warnings in the modeline. Used by `*flycheck'"
       :group '+doom-modeline)

     (defface doom-modeline-urgent
       `((t (:inherit error :bold t)))
       "Face for errors in the modeline. Used by `*flycheck'"
       :group '+doom-modeline)

     ;; Bar
     (defface doom-modeline-bar '((t (:inherit highlight)))
       "The face used for the left-most bar on the mode-line of an active window."
       :group '+doom-modeline)

     (defface doom-modeline-eldoc-bar '((t (:inherit shadow)))
       "The face used for the left-most bar on the mode-line when eldoc-eval is
     active."
       :group '+doom-modeline)

     (defface doom-modeline-inactive-bar '((t (:inherit warning :inverse-video t)))
       "The face used for the left-most bar on the mode-line of an inactive window."
       :group '+doom-modeline)


     ;;
     ;; Bootstrap
     ;;

     ;; Show version string for multi-version managers like rvm, rbenv, pyenv, etc.
     (defvar-local +doom-modeline-env-version nil)
     (defvar-local +doom-modeline-env-command nil)
     (add-hook! '(focus-in-hook find-file-hook) #'+doom-modeline|update-env)
     (defun +doom-modeline|update-env ()
       (when +doom-modeline-env-command
         (let* ((default-directory (projectile-project-root))
                (s (shell-command-to-string +doom-modeline-env-command)))
           (setq +doom-modeline-env-version (if (string-match "[ \t\n\r]+\\'" s)
                                                (replace-match "" t t s)
                                              s)))))

     ;; Only support python and ruby for now
     (add-hook! 'python-mode-hook (setq +doom-modeline-env-command "python --version 2>&1 | cut -d' ' -f2"))
     (add-hook! 'ruby-mode-hook   (setq +doom-modeline-env-command "ruby   --version 2>&1 | cut -d' ' -f2"))


     ;;
     ;; Modeline helpers
     ;;

     (defsubst active ()
       (eq (selected-window) +doom-modeline-current-window))

     ;; Inspired from `powerline's `pl/make-xpm'.
     (defun +doom-modeline--make-xpm (color height width)
       "Create an XPM bitmap."
       (propertize
        " " 'display
        (let ((data (make-list height (make-list width 1)))
              (color (or color "None")))
          (create-image
           (concat
            (format "/* XPM */\nstatic char * percent[] = {\n\"%i %i 2 1\",\n\". c %s\",\n\"  c %s\","
                    (length (car data))
                    (length data)
                    color
                    color)
            (apply #'concat
                   (cl-loop with idx = 0
                            with len = (length data)
                            for dl in data
                            do (cl-incf idx)
                            collect
                            (concat "\""
                                    (cl-loop for d in dl
                                             if (= d 0) collect (string-to-char " ")
                                             else collect (string-to-char "."))
                                    (if (eq idx len) "\"};" "\",\n")))))
           'xpm t :ascent 'center))))

     (defun +doom-modeline-buffer-file-name ()
       "Propertized `buffer-file-name' based on `+doom-modeline-buffer-file-name-style'."
       (propertize
        (pcase +doom-modeline-buffer-file-name-style
          ('truncate-upto-project (+doom-modeline--buffer-file-name 'shrink))
          ('truncate-upto-root (+doom-modeline--buffer-file-name-truncate))
          ('truncate-all (+doom-modeline--buffer-file-name-truncate t))
          ('relative-to-project (+doom-modeline--buffer-file-name-relative))
          ('file-name (propertize (file-name-nondirectory buffer-file-name)
                                  'face
                                  (let ((face (or (and (buffer-modified-p)
                                                       'doom-modeline-buffer-modified)
                                                  (and (active)
                                                       'doom-modeline-buffer-file))))
                                    (when face `(:inherit ,face))))))
        'help-echo (+doom-modeline--buffer-file-name nil)))

     (defun +doom-modeline--buffer-file-name-truncate (&optional truncate-tail)
       "Propertized `buffer-file-name' that truncates every dir along path.
     If TRUNCATE-TAIL is t also truncate the parent directory of the file."
       (let ((dirs (shrink-path-prompt (file-name-directory
                                        (or buffer-file-truename
                                            (file-truename buffer-file-name))))))
         (if (null dirs)
             "%b"
           (let ((modified-faces (if (buffer-modified-p) 'doom-modeline-buffer-modified))
                 (active (active)))
             (let ((dirname (car dirs))
                   (basename (cdr dirs))
                   (dir-faces (or modified-faces (if active 'doom-modeline-project-root-dir)))
                   (file-faces (or modified-faces (if active 'doom-modeline-buffer-file))))
               (concat (propertize (concat dirname
                                           (if truncate-tail (substring basename 0 1) basename)
                                           "/")
                                   'face (if dir-faces `(:inherit ,dir-faces)))
                       (propertize (file-name-nondirectory buffer-file-name)
                                   'face (if file-faces `(:inherit ,file-faces)))))))))

     (defun +doom-modeline--buffer-file-name-relative ()
       "Propertized `buffer-file-name' showing directories relative to project's root only."
       (let ((root (projectile-project-root)))
         (if (null root)
             "%b"
           (let* ((modified-faces (if (buffer-modified-p) 'doom-modeline-buffer-modified))
                  (active (active))
                  (relative-dirs (file-relative-name (file-name-directory buffer-file-name) root))
                  (relative-faces (or modified-faces (if active 'doom-modeline-buffer-path)))
                  (file-faces (or modified-faces (if active 'doom-modeline-buffer-file))))
             (if (equal "./" relative-dirs) (setq relative-dirs ""))
             (concat (propertize relative-dirs 'face (if relative-faces `(:inherit ,relative-faces)))
                     (propertize (file-name-nondirectory buffer-file-name)
                                 'face (if file-faces `(:inherit ,file-faces))))))))

     (defun +doom-modeline--buffer-file-name (truncate-project-root-parent)
       "Propertized `buffer-file-name'.
     If TRUNCATE-PROJECT-ROOT-PARENT is t space will be saved by truncating it down
     fish-shell style.
     Example:
     ~/Projects/FOSS/emacs/lisp/comint.el => ~/P/F/emacs/lisp/comint.el"
       (let* ((project-root (projectile-project-root))
              (file-name-split (shrink-path-file-mixed project-root
                                                       (file-name-directory
                                                        (or buffer-file-truename
                                                            (file-truename buffer-file-name)))
                                                       (file-truename buffer-file-name))))
         (if (null file-name-split)
             "%b"
           (pcase-let ((`(,root-path-parent ,project ,relative-path ,filename) file-name-split))
             (let ((modified-faces (if (buffer-modified-p) 'doom-modeline-buffer-modified))
                   (active (active)))
               (let ((sp-faces       (or modified-faces (if active 'font-lock-comment-face)))
                     (project-faces  (or modified-faces (if active 'font-lock-string-face)))
                     (relative-faces (or modified-faces (if active 'doom-modeline-buffer-path)))
                     (file-faces     (or modified-faces (if active 'doom-modeline-buffer-file))))
                 (let ((sp-props       `(,@(if sp-faces       `(:inherit ,sp-faces))      ,@(if active '(:weight bold))))
                       (project-props  `(,@(if project-faces  `(:inherit ,project-faces)) ,@(if active '(:weight bold))))
                       (relative-props `(,@(if relative-faces `(:inherit ,relative-faces))))
                       (file-props     `(,@(if file-faces     `(:inherit ,file-faces)))))
                   (concat (propertize (if truncate-project-root-parent
                                           root-path-parent
                                         (abbreviate-file-name project-root))
                                       'face sp-props)
                           (propertize (concat project "/") 'face project-props)
                           (when relative-path (propertize relative-path 'face relative-props))
                           (propertize filename 'face file-props)))))))))


     ;;
     ;; Segments
     ;;

     (def-modeline-segment! buffer-project
       "Displays `projectile-project-root'. This is for special buffers like the scratch
     buffer where knowing the current project directory is important."
       (let ((face (if (active) 'doom-modeline-buffer-path)))
         (concat (if (display-graphic-p) " ")
                 (all-the-icons-octicon
                  "file-directory"
                  :face face
                  :v-adjust -0.05
                  :height 1.25)
                 (propertize (concat " " (abbreviate-file-name (projectile-project-root)))
                             'face face))))

     ;;
     (def-modeline-segment! buffer-info
       "Combined information about the current buffer, including the current working
     directory, the file name, and its state (modified, read-only or non-existent)."
       (let ((all-the-icons-scale-factor 1.2))
         (concat (cond (buffer-read-only
                        (concat (all-the-icons-octicon
                                 "lock"
                                 :face 'doom-modeline-warning
                                 :v-adjust -0.05)
                                " "))
                       ((buffer-modified-p)
                        (concat (all-the-icons-faicon
                                 "floppy-o"
                                 :face 'doom-modeline-buffer-modified
                                 :v-adjust -0.0575)
                                " "))
                       ((and buffer-file-name
                             (not (file-exists-p buffer-file-name)))
                        (concat (all-the-icons-octicon
                                 "circle-slash"
                                 :face 'doom-modeline-urgent
                                 :v-adjust -0.05)
                                " "))
                       ((buffer-narrowed-p)
                        (concat (all-the-icons-octicon
                                 "fold"
                                 :face 'doom-modeline-warning
                                 :v-adjust -0.05)
                                " ")))
                 (if buffer-file-name
                     (+doom-modeline-buffer-file-name)
                   "%b"))))

     ;;
     (def-modeline-segment! buffer-info-simple
       "Return the current buffer name only, but with fontification."
       (propertize "%b" 'face (if (active) 'doom-modeline-buffer-file)))

     ;;
     (def-modeline-segment! buffer-encoding
       "Displays the encoding and eol style of the buffer the same way Atom does."
       (concat (pcase (coding-system-eol-type buffer-file-coding-system)
                 (0 "LF  ")
                 (1 "CRLF  ")
                 (2 "CR  "))
               (let ((sys (coding-system-plist buffer-file-coding-system)))
                 (cond ((memq (plist-get sys :category) '(coding-category-undecided coding-category-utf-8))
                        "UTF-8")
                       (t (upcase (symbol-name (plist-get sys :name))))))
               "  "))

     ;;
     (def-modeline-segment! major-mode
       "The major mode, including process, environment and text-scale info."
       (propertize
        (concat (format-mode-line mode-name)
                (when (stringp mode-line-process)
                  mode-line-process)
                (when +doom-modeline-env-version
                  (concat " " +doom-modeline-env-version))
                (and (featurep 'face-remap)
                     (/= text-scale-mode-amount 0)
                     (format " (%+d)" text-scale-mode-amount)))
        'face (if (active) 'doom-modeline-buffer-major-mode)))

     ;;
     (def-modeline-segment! vcs
       "Displays the current branch, colored based on its state."
       (when (and vc-mode buffer-file-name)
         (let* ((backend (vc-backend buffer-file-name))
                (state   (vc-state buffer-file-name backend)))
           (let ((face    'mode-line-inactive)
                 (active  (active))
                 (all-the-icons-scale-factor 1.0)
                 (all-the-icons-default-adjust -0.1))
             (concat "  "
                     (cond ((memq state '(edited added))
                            (if active (setq face 'doom-modeline-info))
                            (all-the-icons-octicon
                             "git-compare"
                             :face face
                             :height 1.2
                             :v-adjust -0.05))
                           ((eq state 'needs-merge)
                            (if active (setq face 'doom-modeline-info))
                            (all-the-icons-octicon "git-merge" :face face))
                           ((eq state 'needs-update)
                            (if active (setq face 'doom-modeline-warning))
                            (all-the-icons-octicon "arrow-down" :face face))
                           ((memq state '(removed conflict unregistered))
                            (if active (setq face 'doom-modeline-urgent))
                            (all-the-icons-octicon "alert" :face face))
                           (t
                            (if active (setq face 'font-lock-doc-face))
                            (all-the-icons-octicon
                             "git-compare"
                             :face face
                             :height 1.2
                             :v-adjust -0.05)))
                     " "
                     (propertize (substring vc-mode (+ (if (eq backend 'Hg) 2 3) 2))
                                 'face (if active face))
                     " ")))))

     ;;
     (defun +doom-ml-icon (icon &optional text face voffset)
       "Displays an octicon ICON with FACE, followed by TEXT. Uses
     `all-the-icons-octicon' to fetch the icon."
       (concat (if vc-mode " " "  ")
               (when icon
                 (concat
                  (all-the-icons-material icon :face face :height 1.1 :v-adjust (or voffset -0.2))
                  (if text +doom-modeline-vspc)))
               (when text
                 (propertize text 'face face))
               (if vc-mode "  " " ")))

     (def-modeline-segment! flycheck
       "Displays color-coded flycheck error status in the current buffer with pretty
     icons."
       (when (boundp 'flycheck-last-status-change)
         (pcase flycheck-last-status-change
           ('finished (if flycheck-current-errors
                          (let-alist (flycheck-count-errors flycheck-current-errors)
                            (let ((sum (+ (or .error 0) (or .warning 0))))
                              (+doom-ml-icon "do_not_disturb_alt"
                                             (number-to-string sum)
                                             (if .error 'doom-modeline-urgent 'doom-modeline-warning)
                                             -0.25)))
                        (+doom-ml-icon "check" nil 'doom-modeline-info)))
           ('running     (+doom-ml-icon "access_time" nil 'font-lock-doc-face -0.25))
           ('no-checker  (+doom-ml-icon "sim_card_alert" "-" 'font-lock-doc-face))
           ('errored     (+doom-ml-icon "sim_card_alert" "Error" 'doom-modeline-urgent))
           ('interrupted (+doom-ml-icon "pause" "Interrupted" 'font-lock-doc-face)))))
           ;; ('interrupted (+doom-ml-icon "x" "Interrupted" 'font-lock-doc-face)))))

     ;;
     (defsubst doom-column (pos)
       (save-excursion (goto-char pos)
                       (current-column)))

     (def-modeline-segment! selection-info
       "Information about the current selection, such as how many characters and
     lines are selected, or the NxM dimensions of a block selection."
       (when (and (active) (or mark-active (eq evil-state 'visual)))
         (let ((reg-beg (region-beginning))
               (reg-end (region-end)))
           (propertize
            (let ((lines (count-lines reg-beg (min (1+ reg-end) (point-max)))))
              (cond ((or (bound-and-true-p rectangle-mark-mode)
                         (eq 'block evil-visual-selection))
                     (let ((cols (abs (- (doom-column reg-end)
                                         (doom-column reg-beg)))))
                       (format "%dx%dB" lines cols)))
                    ((eq 'line evil-visual-selection)
                     (format "%dL" lines))
                    ((> lines 1)
                     (format "%dC %dL" (- (1+ reg-end) reg-beg) lines))
                    (t
                     (format "%dC" (- (1+ reg-end) reg-beg)))))
            'face 'doom-modeline-highlight))))


     ;;
     (defun +doom-modeline--macro-recording ()
       "Display current Emacs or evil macro being recorded."
       (when (and (active) (or defining-kbd-macro executing-kbd-macro))
         (let ((sep (propertize " " 'face 'doom-modeline-panel)))
           (concat sep
                   (propertize (if (bound-and-true-p evil-this-macro)
                                   (char-to-string evil-this-macro)
                                 "Macro")
                               'face 'doom-modeline-panel)
                   sep
                   (all-the-icons-octicon "triangle-right"
                                          :face 'doom-modeline-panel
                                          :v-adjust -0.05)
                   sep))))

     (defsubst +doom-modeline--anzu ()
       "Show the match index and total number thereof. Requires `anzu', also
     `evil-anzu' if using `evil-mode' for compatibility with `evil-search'."
       (when (and anzu--state (not iedit-mode))
         (propertize
          (let ((here anzu--current-position)
                (total anzu--total-matched))
            (cond ((eq anzu--state 'replace-query)
                   (format " %d replace " total))
                  ((eq anzu--state 'replace)
                   (format " %d/%d " here total))
                  (anzu--overflow-p
                   (format " %s+ " total))
                  (t
                   (format " %s/%d " here total))))
          'face (if (active) 'doom-modeline-panel))))

     (defsubst +doom-modeline--evil-substitute ()
       "Show number of matches for evil-ex substitutions and highlights in real time."
       (when (and evil-mode
                  (or (assq 'evil-ex-substitute evil-ex-active-highlights-alist)
                      (assq 'evil-ex-global-match evil-ex-active-highlights-alist)
                      (assq 'evil-ex-buffer-match evil-ex-active-highlights-alist)))
         (propertize
          (let ((range (if evil-ex-range
                           (cons (car evil-ex-range) (cadr evil-ex-range))
                         (cons (line-beginning-position) (line-end-position))))
                (pattern (car-safe (evil-delimited-arguments evil-ex-argument 2))))
            (if pattern
                (format " %s matches " (how-many pattern (car range) (cdr range)))
              " - "))
          'face (if (active) 'doom-modeline-panel))))

     (defun doom-themes--overlay-sort (a b)
       (< (overlay-start a) (overlay-start b)))

     (defsubst +doom-modeline--iedit ()
       "Show the number of iedit regions matches + what match you're on."
       (when (and iedit-mode iedit-occurrences-overlays)
         (propertize
          (let ((this-oc (or (let ((inhibit-message t))
                               (iedit-find-current-occurrence-overlay))
                             (progn (iedit-prev-occurrence)
                                    (iedit-find-current-occurrence-overlay))))
                (length (length iedit-occurrences-overlays)))
            (format " %s/%d "
                    (if this-oc
                        (- length
                           (length (memq this-oc (sort (append iedit-occurrences-overlays nil)
                                                       #'doom-themes--overlay-sort)))
                           -1)
                      "-")
                    length))
          'face (if (active) 'doom-modeline-panel))))

     (def-modeline-segment! matches
       "Displays: 1. the currently recording macro, 2. A current/total for the
     current search term (with anzu), 3. The number of substitutions being conducted
     with `evil-ex-substitute', and/or 4. The number of active `iedit' regions."
       (let ((meta (concat (+doom-modeline--macro-recording)
                           (+doom-modeline--anzu)
                           (+doom-modeline--evil-substitute)
                           (+doom-modeline--iedit))))
          (or (and (not (equal meta "")) meta)
              (if buffer-file-name " %I "))))

     ;; TODO Include other information
     (def-modeline-segment! media-info
       "Metadata regarding the current file, such as dimensions for images."
       (cond ((eq major-mode 'image-mode)
              (cl-destructuring-bind (width . height)
                  (image-size (image-get-display-property) :pixels)
                (format "  %dx%d  " width height)))))

     (def-modeline-segment! bar
       "The bar regulates the height of the mode-line in GUI Emacs.
     Returns \"\" to not break --no-window-system."
       (if (display-graphic-p)
           (+doom-modeline--make-xpm
            (face-background (if (active)
                                 'doom-modeline-bar
                               'doom-modeline-inactive-bar)
                             nil t)
            +doom-modeline-height
            +doom-modeline-bar-width)
         ""))


     ;;
     ;; Mode lines
     ;;

     (def-modeline! main
       (bar matches " " buffer-info-simple "  %l:%c %p  " selection-info)
       (buffer-encoding major-mode vcs flycheck))

     (def-modeline! minimal
       (bar matches " " buffer-info-simple)
       (media-info major-mode))

     (def-modeline! special
       (bar matches " " buffer-info-simple "  %l:%c %p  " selection-info)
       (buffer-encoding major-mode flycheck))

     (def-modeline! project
       (bar buffer-project)
       (major-mode))

     (def-modeline! media
       (bar " %b  ")
       (media-info major-mode))


     ;;
     ;; Hooks
     ;;

     (defun +doom-modeline|init ()
       "Set the default modeline."
       (doom-set-modeline 'main t)

       ;; This scratch buffer is already created and doesn't get a modeline. For the
       ;; love of Emacs, someone give the man a modeline!
       (with-current-buffer "*scratch*"
         (doom-set-modeline 'main)))

     (defun +doom-modeline|set-special-modeline ()
       (doom-set-modeline 'special))

     (defun +doom-modeline|set-media-modeline ()
       (doom-set-modeline 'media))


     ;;
     ;; Bootstrap
     ;;

     (doom-set-modeline 'main t)
     ;; This scratch buffer is already created and doesn't get a modeline. For the
     ;; love of Emacs, someone give the man a modeline!
     (with-current-buffer "*scratch*"
       (doom-set-modeline 'main))

     (add-hook 'org-src-mode-hook #'+doom-modeline|set-special-modeline)
     (add-hook 'image-mode-hook   #'+doom-modeline|set-media-modeline)
     (add-hook 'circe-mode-hook #'+doom-modeline|set-special-modeline)
   #+END_SRC
** Ivy
   #+BEGIN_SRC emacs-lisp
     (use-package ivy
       :diminish (ivy-mode . "")
       :config
       (ivy-mode 1)
       ;; add ‘recentf-mode’ and bookmarks to ‘ivy-switch-buffer’.
       (setq ivy-use-virtual-buffers t)
       ;; number of result lines to display
       (setq ivy-height 10)
       ;; does not count candidates
       (setq ivy-count-format "")
       ;; no regexp by default
       (setq ivy-initial-inputs-alist nil)
       ;; configure regexp engine.
       (setq ivy-re-builders-alist
             ;; allow input not in order
             '((t   . ivy--regex-ignore-order))))

     (use-package counsel
       :after ivy
       :config
       (use-package counsel-projectile
           :after projectile)

       (use-package counsel-gtags))

   #+END_SRC
** Which-key
   #+BEGIN_SRC emacs-lisp
     (use-package which-key
       :init
       (setq which-key-idle-delay 0.2)
       (setq which-key-add-column-padding 1)
       :config
       (which-key-mode))
   #+END_SRC
** Dashboard
   #+BEGIN_SRC emacs-lisp
     (use-package dashboard
       :init
       (setq dashboard-items '((recents  . 5)
                               (projects . 5)))
       (setq dashboard-startup-banner 'logo)
       (setq dashboard-banner-logo-title "Welcome to Emacs!")
       :config
       (add-hook 'dashboard-mode-hook (lambda ()
                                        (nlinum-mode 0)
                                        ))
       (dashboard-setup-startup-hook))

   #+END_SRC
* Misc
** Rainbow delimeters
   #+BEGIN_SRC emacs-lisp
     (use-package rainbow-delimiters
       :config
       (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
   #+END_SRC
** Persistent undo history
   #+BEGIN_SRC emacs-lisp
     (setq undo-tree-auto-save-history t)
     (setq undo-tree-history-directory-alist '(("." . "~/.emacs.d/undo")))
   #+END_SRC
** Dumb jump
   #+BEGIN_SRC emacs-lisp
     (use-package dumb-jump)
   #+END_SRC
** Zooming
   #+BEGIN_SRC emacs-lisp
     (use-package default-text-scale)
   #+END_SRC
** Highlight TODO and FIXME
   #+BEGIN_SRC emacs-lisp
     (use-package fic-mode
       :config
       (add-hook 'prog-mode-hook 'fic-mode))
   #+END_SRC
** Find other file (header/source)
   #+BEGIN_SRC emacs-lisp
     (use-package cff)
   #+END_SRC
** Shackle
   #+BEGIN_SRC emacs-lisp
     (use-package shackle
       :init
       (setq shackle-default-rule '(:same t)))
   #+END_SRC
** Eyebrowse
   #+BEGIN_SRC emacs-lisp
     (use-package eyebrowse
       :config
       (eyebrowse-mode t))
   #+END_SRC
** Electric pair mode
   #+BEGIN_SRC emacs-lisp
     (electric-pair-mode)
   #+END_SRC
** Rainbow-mode
   #+BEGIN_SRC emacs-lisp
     (use-package rainbow-mode
       :config
       (add-hook 'prog-mode-hook (lambda () (rainbow-mode 1))))
   #+END_SRC
** Other stuff
   #+BEGIN_SRC emacs-lisp
     (setq mouse-wheel-scroll-amount '(2 ((shift) . 2))) ;; one line at a time
     (setq mouse-wheel-progressive-speed nil) ;; don't accelerate scrolling
     (setq mouse-wheel-follow-mouse 't) ;; scroll window under mouse
     (setq scroll-step 1) ;; keyboard scroll one line at a time

     (setq-default indent-tabs-mode nil)

     ;; (setq show-paren-delay 0)
     ;; (show-paren-mode t)
     ;; (setq show-paren-style 'parenthesis)

     (add-hook 'prog-mode-hook #'hs-minor-mode)

     (setq-default fringes-outside-margins t)

     ;; Stop emacs from making a mess
     (setq auto-save-file-name-transforms
               `((".*" ,(concat user-emacs-directory "auto-save/") t)))
     (setq backup-directory-alist
           `(("." . ,(expand-file-name
                     (concat user-emacs-directory "backups")))))

     (use-package nlinum
       :init
       (setq nlinum-highlight-current-line t)
       :config
       ;; (add-hook 'prog-mode-hook #'nlinum-mode)
       (defun nlinum-mode-margin-hook ()
         (when nlinum-mode
           (setq-local nlinum-format "%d ")))
       (add-hook 'nlinum-mode-hook #'nlinum-mode-margin-hook))

     (use-package evil-vimish-fold
       :after evil
       :config
       (evil-vimish-fold-mode 1))

     (use-package exec-path-from-shell
       :config
       (exec-path-from-shell-initialize))
   #+END_SRC
* Evil
  #+BEGIN_SRC emacs-lisp
    (use-package evil
      :init
      (setq evil-shift-width 2)
      :config
      (fset 'evil-visual-update-x-selection 'ignore)
      (evil-mode 1)

      (define-key evil-normal-state-map (kbd "C-h") 'evil-window-left)
        (define-key evil-normal-state-map (kbd "C-j") 'evil-window-down)
        (define-key evil-normal-state-map (kbd "C-k") 'evil-window-up)
        (define-key evil-normal-state-map (kbd "C-l") 'evil-window-right)

      (defun minibuffer-keyboard-quit ()
        "Abort recursive edit.
        In Delete Selection mode, if the mark is active, just deactivate it;
        then it takes a second \\[keyboard-quit] to abort the minibuffer."
        (interactive)
        (if (and delete-selection-mode transient-mark-mode mark-active)
          (setq deactivate-mark  t)
          (when (get-buffer "*Completions*") (delete-windows-on "*Completions*"))
          (abort-recursive-edit)))
      (define-key evil-normal-state-map [escape] 'keyboard-quit)
      (define-key evil-visual-state-map [escape] 'keyboard-quit)
      (define-key minibuffer-local-map [escape] 'minibuffer-keyboard-quit)
      (define-key minibuffer-local-ns-map [escape] 'minibuffer-keyboard-quit)
      (define-key minibuffer-local-completion-map [escape] 'minibuffer-keyboard-quit)
      (define-key minibuffer-local-must-match-map [escape] 'minibuffer-keyboard-quit)
      (define-key minibuffer-local-isearch-map [escape] 'minibuffer-keyboard-quit)
      (global-set-key [escape] 'evil-exit-emacs-state))
  #+END_SRC
** Evil leader
   #+BEGIN_SRC emacs-lisp
     (use-package evil-leader
       :after evil
       :config
       (global-evil-leader-mode)

       ; Overload shifts so that they don't lose the selection
       (define-key evil-visual-state-map (kbd ">") 'felipe/evil-shift-right-visual)
       (define-key evil-visual-state-map (kbd "<") 'felipe/evil-shift-left-visual)
       (define-key evil-visual-state-map [tab] 'felipe/evil-shift-right-visual)
       (define-key evil-visual-state-map [S-tab] 'felipe/evil-shift-left-visual)

       (evil-leader/set-leader felipe/leader-key))
   #+END_SRC
** Evil commentary
   #+BEGIN_SRC emacs-lisp
     (use-package evil-commentary
       :after evil
       :config
       (evil-commentary-mode))
   #+END_SRC
** Evil surround
   #+BEGIN_SRC emacs-lisp
     (use-package evil-surround
       :after evil
       :config
       (global-evil-surround-mode 1))
   #+END_SRC
* Snippets
  #+BEGIN_SRC emacs-lisp
    (use-package yasnippet
      :init
      (setq yas-snippet-dirs
            '("~/.emacs.d/yasnippet-snippets"
              "~/.emacs.d/snippets"))
      :config
      (yas-global-mode 1))
  #+END_SRC
* Flycheck
  #+BEGIN_SRC emacs-lisp
    (use-package flycheck
      :init
      (setq flycheck-highlighting-mode 'symbols)
      (setq flycheck-indication-mode nil)
      (with-eval-after-load 'flycheck
        (setq-default flycheck-disabled-checkers '(emacs-lisp-checkdoc)))
      :config
      (global-flycheck-mode)
      (use-package flycheck-pos-tip
        :config
        (flycheck-pos-tip-mode)))
  #+END_SRC
* Company
  #+BEGIN_SRC emacs-lisp
    (use-package company
      :init
      (setq company-tooltip-align-annotations t)
      :config
      (global-company-mode))
  #+END_SRC
* Git
  #+BEGIN_SRC emacs-lisp
    (use-package magit)

    (use-package evil-magit
      :after magit)

    (use-package git-gutter-fringe
      :config
      (global-git-gutter-mode +1)
      (when (display-graphic-p)
        ;; because git-gutter is in the left fringe
        ;; subtle diff indicators in the fringe
        ;; places the git gutter outside the margins.
        (setq-default fringes-outside-margins t)
        ;; thin fringe bitmaps
        (fringe-helper-define 'git-gutter-fr:added '(center repeated)
          "XXX.....")
        (fringe-helper-define 'git-gutter-fr:modified '(center repeated)
          "XXX.....")
        (fringe-helper-define 'git-gutter-fr:deleted 'bottom
          "X......."
          "XX......"
          "XXX....."
          "XXXX....")))
  #+END_SRC
* Docker
  #+BEGIN_SRC emacs-lisp
    (use-package docker)
  #+END_SRC
* Languages
** LSP
   Language server protocol
   #+BEGIN_SRC emacs-lisp
     ;; (use-package lsp-mode
     ;;   :config
     ;;   (with-eval-after-load 'lsp-mode
     ;;       (require 'lsp-flycheck)))
   #+END_SRC
** Org
   #+BEGIN_SRC emacs-lisp
     (use-package org
       :config
       (setq org-src-fontify-natively t)
       (setq org-log-done 'time))

     (use-package org-bullets
       :after org
       :init
       (add-hook 'org-mode-hook (lambda ()
                                 ;; (nlinum-mode 0)
                                 (org-bullets-mode 1))))

     (use-package evil-org
       :after org)
   #+END_SRC
** Markdown
   #+BEGIN_SRC emacs-lisp
     (use-package markdown-mode)
   #+END_SRC
** Rust
   #+BEGIN_SRC emacs-lisp
     (use-package rust-mode
       ;; :after lsp-mode
       :config

       (use-package racer
         :after company
         :config
         (add-hook 'rust-mode-hook #'racer-mode)
         (add-hook 'racer-mode-hook #'eldoc-mode)
         (add-hook 'racer-mode-hook #'company-mode))

       (use-package flycheck-rust
         :after flycheck
         :config
         (add-hook 'flycheck-mode-hook #'flycheck-rust-setup))

       (define-key rust-mode-map (kbd "TAB") #'company-indent-or-complete-common)

       ;; (use-package lsp-rust
       ;;   :config
       ;;   (add-hook 'rust-mode #'lsp-mode))
       )

     ;; (use-package cargo
     ;;   :after rust-mode
     ;;   :config
     ;;   (add-hook 'rust-mode-hook 'cargo-minor-mode))
   #+END_SRC
** Python
   #+BEGIN_SRC emacs-lisp
     (use-package elpy
       :config
       (elpy-enable)
       (when (require 'flycheck nil t)
         (setq elpy-modules (delq 'elpy-module-flymake elpy-modules))
         (add-hook 'elpy-mode-hook 'flycheck-mode))
       (setq elpy-modules (delete 'elpy-module-highlight-indentation elpy-modules)))

     ;; (use-package anaconda-mode
     ;;   :config
     ;;   (add-hook 'python-mode-hook 'anaconda-mode)
     ;;   (add-hook 'python-mode-hook 'anaconda-eldoc-mode))
   #+END_SRC
** Lua
   #+BEGIN_SRC emacs-lisp
     (use-package lua-mode
       :init
       (setq lua-indent-level 2)
       :config
       (use-package company-lua
         :after company
         :config
         (add-to-list 'company-backends 'company-lua)))
   #+END_SRC
** Javascript
   #+BEGIN_SRC emacs-lisp
    (use-package js2-mode
      :init
      (setq js2-highlight-level 3)
      :config
      (add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode)))
   #+END_SRC
** C/C++
   #+BEGIN_SRC emacs-lisp
     ;; (use-package rtags
     ;;   :init
     ;;   (setq rtags-autostart-diagnostics t)
     ;;   (setq rtags-completions-enabled t)
     ;;   :config
     ;;   (use-package company-rtags
     ;;     :config
     ;;     (push 'company-rtags company-backends))
     ;;   (use-package flycheck-rtags
     ;;     :config
     ;;     (defun my-flycheck-rtags-setup ()
     ;;       (flycheck-select-checker 'rtags)
     ;;       (setq-local flycheck-highlighting-mode nil) ;; RTags creates more accurate overlays.
     ;;       (setq-local flycheck-check-syntax-automatically nil))
     ;;     (add-hook 'c-mode-hook #'my-flycheck-rtags-setup)
     ;;     (add-hook 'c++-mode-hook #'my-flycheck-rtags-setup))
     ;;   (use-package ivy-rtags
     ;;     :init
     ;;     (setq rtags-display-result-backend 'ivy)))

     (use-package irony
       :after evil-leader
       :config
       (add-hook 'c++-mode-hook 'irony-mode)
       (add-hook 'c-mode-hook 'irony-mode)
       (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options)

       ;; (setq-default irony-cdb-compilation-databases '(irony-cdb-clang-complete))
       ;; (setq irony-additional-clang-options '("-std=c++14"))

       (use-package flycheck-irony
         :after flycheck
         :config
         (add-hook 'flycheck-mode-hook #'flycheck-irony-setup))

       (use-package company-irony
         :after company
         :config
         (add-to-list 'company-backends 'company-irony))

       (use-package irony-eldoc
         :config
         (add-hook 'irony-mode-hook 'irony-eldoc)))


     (use-package clang-format)

     (add-to-list 'auto-mode-alist '("\\.h\\'" . c++-mode))
   #+END_SRC
** Haskell
   #+BEGIN_SRC emacs-lisp
    (use-package intero
      :config
      (add-hook 'haskell-mode-hook 'intero-mode))
   #+END_SRC
** Emacs lisp
   #+BEGIN_SRC emacs-lisp
    (use-package elisp-format)
   #+END_SRC
** Typescript
   #+BEGIN_SRC emacs-lisp
    (use-package tide
      :after company
      :config
      (defun setup-tide-mode ()
        (interactive)
        (tide-setup))

      ;; formats the buffer before saving
      (add-hook 'before-save-hook 'tide-format-before-save)

      (add-hook 'typescript-mode-hook #'setup-tide-mode))
   #+END_SRC
** Web languages (markup, etc)
   #+BEGIN_SRC emacs-lisp
    (use-package web-mode)
    (use-package pug-mode)
    (use-package scss-mode)
   #+END_SRC
** GLSL
   #+BEGIN_SRC emacs-lisp
    (use-package glsl-mode
      :config
      (add-to-list 'auto-mode-alist '("\\.vsh\\'" . glsl-mode))
      (add-to-list 'auto-mode-alist '("\\.fsh\\'" . glsl-mode))
      (add-to-list 'auto-mode-alist '("\\.glslf\\'" . glsl-mode))
      (add-to-list 'auto-mode-alist '("\\.glslv\\'" . glsl-mode)))
   #+END_SRC
** Go
   #+BEGIN_SRC emacs-lisp
     (use-package go-mode
       :config
       (setq gofmt-command "goimports")
       (add-hook 'before-save-hook 'gofmt-before-save)
       (use-package company-go
         :config
         (add-hook 'go-mode-hook (lambda ()
                                   (set (make-local-variable 'company-backends) '(company-go))
                                   (company-mode))))
       (use-package go-eldoc
         :config
         (add-hook 'go-mode-hook 'go-eldoc-setup)))
   #+END_SRC
** Nim
   #+BEGIN_SRC emacs-lisp
     (use-package nim-mode
       :init
       (setq nim-nimsuggest-path "~/.nim/bin/nimsuggest")
       :config
       (defconst flycheck-nimsuggest-error-parser 'flycheck-nimsuggest-error-parser)
       (add-hook 'nim-mode-hook 'nimsuggest-mode)
       (add-hook 'nim-mode-hook 'company-mode)
       (add-hook 'nimscript-mode-hook 'company-mode))
   #+END_SRC
** Dockerfile
   #+BEGIN_SRC emacs-lisp
     (use-package dockerfile-mode)
   #+END_SRC
** Qml
   #+BEGIN_SRC emacs-lisp
     (use-package qml-mode
       :config
       (use-package company-qml
         :config
         (add-to-list 'company-backends 'company-qml)))
   #+END_SRC
* Writing
  Provides a distraction free writing mode.
  #+BEGIN_SRC emacs-lisp
    (use-package olivetti)
  #+END_SRC
* Indentation
  #+BEGIN_SRC emacs-lisp
    (add-hook 'rust-mode-hook
      (function (lambda ()
        (setq tab-width 4)
        (setq evil-shift-width 4))))

    (add-hook 'go-mode-hook
      (function (lambda ()
        (setq tab-width 8)
        (setq evil-shift-width 8))))

    (add-hook 'python-mode-hook
      (function (lambda ()
        (setq tab-width 4)
        (setq evil-shift-width 4))))

    (add-hook 'emacs-lisp-mode-hook
      (function (lambda ()
        (setq tab-width 2)
        (setq evil-shift-width 2))))

    (add-hook 'typescript-mode-hook
      (function (lambda ()
        (setq tab-width 4)
        (setq evil-shift-width 4))))

    (add-hook 'js2-mode-hook
      (function (lambda ()
        (setq js2-basic-offset 2)
        (setq js-indent-level 2)
        (setq evil-shift-width 2))))

    (add-hook 'js-mode-hook
      (function (lambda ()
        (setq js2-basic-offset 2)
        (setq js-indent-level 2)
        (setq evil-shift-width 2))))

    (add-hook 'c++-mode
      (function (lambda ()
        (setq tab-width 2)
        (setq c-basic-offset 2)
        (setq evil-shift-width 2))))

    (add-hook 'c-mode
      (function (lambda ()
        (setq tab-width 2)
        (setq c-basic-offset 2)
        (setq evil-shift-width 2))))

    (add-hook 'lua-mode
      (function (lambda ()
        (setq tab-width 2)
        (setq evil-shift-width 2))))
  #+END_SRC
* Keybinds
** Map ESC to cancel (C-g)
   #+BEGIN_SRC emacs-lisp
     (define-key isearch-mode-map [escape] 'isearch-abort)   ;; isearch
     (define-key isearch-mode-map "\e" 'isearch-abort)   ;; \e seems to work better for terminals
     (global-set-key [escape] 'keyboard-escape-quit)         ;; everywhere else
   #+END_SRC
** Core bindings
   #+BEGIN_SRC emacs-lisp
     (felipe/name-bind "T" "theme/toggles")
     (felipe/bind "Tt" 'counsel-load-theme "themes")
     (felipe/bind "Tn" 'nlinum-mode "toggle line numbers")

     (felipe/name-bind "z" "zoom")
     (felipe/bind "zz" 'text-scale-adjust "adjust zoom")
     (felipe/bind "zi" 'text-scale-increase "zoom in")
     (felipe/bind "zo" 'text-scale-decrease "zoom out")

     (felipe/name-bind "f" "files")
     (felipe/bind "ff" 'counsel-find-file "find file")
     (felipe/bind "fb" 'hs-toggle-hiding "toggle fold")
     (felipe/name-bind "fe" "edit")
     (felipe/bind "fed" 'felipe/edit-config "edit config")
     (felipe/bind "fet" 'felipe/edit-todo "edit todo")
     (felipe/bind "fer" 'felipe/reload-config "reload config")

     (felipe/name-bind "b" "buffer")
     (felipe/bind "bb" 'ivy-switch-buffer "find buffer")
     (felipe/bind "bd" 'kill-this-buffer "delete buffer")
     (felipe/bind "bn" 'next-buffer "next buffer")
     (felipe/bind "bp" 'previous-buffer "previous buffer")

     (felipe/name-bind "w" "window")
     (felipe/bind "w/" 'split-window-right "split right")
     (felipe/bind "w-" 'split-window-below "split below")
     (felipe/bind "wd" 'delete-window "delete window")

     (felipe/name-bind "e" "error")
     (felipe/bind "en" 'flycheck-next-error "next error")
     (felipe/bind "ep" 'flycheck-previous-error "previous error")

     (felipe/name-bind "p" "projectile")
     (felipe/bind "pp" 'counsel-projectile-switch-project "switch project")
     (felipe/bind "pf" 'counsel-projectile "find file")
     (felipe/bind "pg" 'counsel-git-grep "git grep")

     (felipe/name-bind "m" "major mode")
     (felipe/name-bind "mr" "run/refactor")
     (felipe/name-bind "mg" "go")
     (felipe/bind "mgg" 'dumb-jump-go "goto def")
     (felipe/bind "mgG" 'dumb-jump-go-other-window "goto def in other window")

     (felipe/name-bind "g" "git")
     (felipe/bind "gg" 'magit-status "status")
     (felipe/bind "gc" 'magit-commit "commit")
     (felipe/bind "gp" 'magit-push "push")
     (felipe/bind "gs" 'magit-stage "stage")
     (felipe/bind "gU" 'magit-unstage "unstage")
   #+END_SRC
** Org mode
   #+BEGIN_SRC emacs-lisp
     (felipe/name-bind-mode "mi" "insert" 'org-mode)
     (felipe/bind-mode "mih" 'org-insert-heading-respect-content "heading" 'org-mode)
     (felipe/bind-mode "mis" 'org-insert-subheading "subheading" 'org-mode)
     (felipe/bind-mode "mii" 'org-insert-item "item" 'org-mode)
     (felipe/bind-mode "mil" 'org-insert-link "link" 'org-mode)

     (felipe/bind-mode "mm" 'org-ctrl-c-ctrl-c "C-c C-c" 'org-mode)

     (felipe/bind-mode "mt" 'org-todo "todo" 'org-mode)
   #+END_SRC
** Rust
   #+BEGIN_SRC emacs-lisp
     (felipe/bind-mode "mb" 'cargo-process-build "cargo build" 'rust-mode)
     (felipe/bind-mode "mr" 'cargo-process-run "cargo run" 'rust-mode)
     (felipe/bind-mode "mf" 'rust-format-buffer "format" 'rust-mode)
   #+END_SRC
** Lua
   #+BEGIN_SRC emacs-lisp
     (felipe/bind-mode "mrr" '(lambda ()
                    (interactive)
                    (let ((app-root (locate-dominating-file (buffer-file-name) "main.lua")))
                      (shell-command (format "love %s &" app-root))))
                       "run love game" 'lua-mode)
   #+END_SRC
** C/C++
   #+BEGIN_SRC emacs-lisp
     (felipe/bind-mode "mf" 'clang-format-buffer "format" 'c++-mode)
     (felipe/bind-mode "ms" 'cff-find-other-file "switch file" 'c++-mode)

     (felipe/bind-mode "mf" 'clang-format-buffer "format" 'c-mode)
     (felipe/bind-mode "ms" 'cff-find-other-file "switch file" 'c-mode)
   #+END_SRC
** Typescript
   #+BEGIN_SRC emacs-lisp
     (felipe/bind-mode "mf" 'tide-format "format" 'typescript-mode)
     (felipe/bind-mode "mgg" 'tide-goto-reference "go to reference" 'typescript-mode)
     (felipe/bind-mode "mrs" 'tide-rename-symbol "rename Symbol" 'typescript-mode)
   #+END_SRC
** Go
   #+BEGIN_SRC emacs-lisp
     (felipe/bind-mode "mf" 'gofmt "format" 'go-mode)
     (felipe/bind-mode "mi" 'go-import-add "add imports" 'go-mode)
   #+END_SRC
** Python
   #+BEGIN_SRC emacs-lisp
     (felipe/bind-mode "mf" 'elpy-format-code "format" 'python-mode)
     (felipe/bind-mode "mi" 'elpy-importmagic-fixup "fix imports" 'python-mode)
     (felipe/bind-mode "md" 'elpy-doc "show documentation" 'python-mode)
     (felipe/bind-mode "mgd" 'elpy-goto-definition "go to definition" 'python-mode)
   #+END_SRC
* Startup
  #+BEGIN_SRC emacs-lisp
    ;; (find-file "~/todo.org")
  #+END_SRC

