* GC hack
  Makes emacs start up a bit faster
  #+BEGIN_SRC emacs-lisp
  (setq gc-cons-threshold 100000000)
  #+END_SRC
* Setup package management
  #+BEGIN_SRC emacs-lisp
  (when (>= emacs-major-version 24)
    (setq-default
    load-prefer-newer t
    package-enable-at-startup nil)
    (package-initialize)
    (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/") t)
    (unless (package-installed-p 'use-package)
      (package-refresh-contents)
      (package-install 'use-package)))

  (setq use-package-always-ensure t)
  #+END_SRC
* Custom definitions
** Properties
   #+BEGIN_SRC emacs-lisp
     (setq inhibit-splash-screen t)
     (setq inhibit-startup-message t)
     (setq felipe/leader-key "<SPC>")
   #+END_SRC
** Keybinding
   #+BEGIN_SRC emacs-lisp
    (defun felipe/name-bind (keycombo name)
      (interactive)
      (which-key-add-key-based-replacements (concat felipe/leader-key keycombo) name))

    (defun felipe/bind (keycombo command name)
      (interactive)
      (evil-leader/set-key keycombo command)
      (felipe/name-bind keycombo name))

    (defun felipe/name-bind-mode (keycombo name mode)
      (which-key-add-major-mode-key-based-replacements mode (concat felipe/leader-key keycombo) name))

    (defun felipe/bind-mode (keycombo command name mode)
      (evil-leader/set-key-for-mode mode keycombo command)
      (felipe/name-bind-mode keycombo name mode))
   #+END_SRC
** Configuration
   #+BEGIN_SRC emacs-lisp
     (defun felipe/edit-config()
       (interactive)
       (find-file "~/.emacs.d/config.org"))

     (defun felipe/reload-config()
       (interactive)
       (load-file "~/.emacs.d/init.el")
       (evil-leader-mode))
   #+END_SRC
** UI
   #+BEGIN_SRC emacs-lisp
     (defun felipe/setup-ui ()
       (set-frame-font "Hack 12")

       (tool-bar-mode -1)
       (menu-bar-mode -1)
       (blink-cursor-mode 0)
       (scroll-bar-mode 0)
       (tooltip-mode 0))
   #+END_SRC
** Evil
   These are used to modify evil's indent shift behavior
   #+BEGIN_SRC emacs-lisp
     (defun felipe/evil-shift-left-visual ()
       (interactive)
       (evil-shift-left (region-beginning) (region-end))
       (evil-normal-state)
       (evil-visual-restore))

     (defun felipe/evil-shift-right-visual ()
       (interactive)
       (evil-shift-right (region-beginning) (region-end))
       (evil-normal-state)
       (evil-visual-restore))
   #+END_SRC
* UI
** Helm
   #+BEGIN_SRC emacs-lisp
     (use-package helm
       :init
       (setq helm-split-window-in-side-p t)
       :config
       (helm-mode 1)
       (helm-autoresize-mode 1)
       (define-key helm-find-files-map "\t" 'helm-execute-persistent-action))

     (use-package helm-themes
       :after helm)
   #+END_SRC
** Which-key
   #+BEGIN_SRC emacs-lisp
     (use-package which-key
       :init
       (setq which-key-idle-delay 0.2)
       (setq which-key-add-column-padding 1)
       :config
       (which-key-mode))
   #+END_SRC
** Theme
  #+BEGIN_SRC emacs-lisp
    (use-package all-the-icons)

    ;; (use-package zerodark-theme
    ;;   :after all-the-icons
    ;;   :config
    ;;   (load-theme 'zerodark t)
    ;;   (zerodark-setup-modeline-format))

    (use-package kaolin-theme
      :config
      (load-theme 'kaolin t)

      (use-package telephone-line
        :config
        ;; Need to create custom segments
        (require 'telephone-line-utils)

        ;; Set default separators: choose either of them
        (setq telephone-line-primary-left-separator 'telephone-line-identity-left)
        (setq telephone-line-primary-right-separator 'telephone-line-identity-right)
        ;; OR
        ;; (setq telephone-line-primary-left-separator 'telephone-line-cubed-left)
        ;; (setq telephone-line-primary-right-separator 'telephone-line-cubed-right)

        ;; Set subseparator
        (if window-system
            (progn
              (setq telephone-line-secondary-left-separator 'telephone-line-identity-hollow-left)
              (setq telephone-line-secondary-right-separator 'telephone-line-identity-hollow-right)))

        ;;;; Custom segments

        ;; Example of color string segment
        ;; (telephone-line-defsegment* my-color-segment
        ;;   (propertize "some-string" 'face `(:foreground "green")))


        ;; TODO: Rewrite using assoc and defvar
        ;; Display major mode
        (telephone-line-defsegment* my-major-mode-segment
          (let ((mode (cond
                      ((string= mode-name "Fundamental") "Text")
                      ((string= mode-name "Emacs-Lisp") "Elisp")
                      ((string= mode-name "Javascript-IDE") "Javascript")
                      (t mode-name))))
            (propertize mode 'face `(:foreground "#835d83"))))

        ;; Display evil state
        (telephone-line-defsegment* my-evil-segment
          (if (telephone-line-selected-window-active)
            (let ((tag (cond
                        ((string= evil-state "normal") ":")
                        ((string= evil-state "insert") ">")
                        ((string= evil-state "replace") "r")
                        ((string= evil-state "visual") "v")
                        ((string= evil-state "operator") "=")
                        ((string= evil-state "motion") "m")
                        ((string= evil-state "emacs") "Emacs")
                        ((string= evil-state "multiedit") "Multi")
                        (t "-"))))
              tag)))

        ;; Display buffer name
        (telephone-line-defsegment* my-buffer-segment
          `(""
            ,(telephone-line-raw mode-line-buffer-identification t)))


        ;; Display current position in a buffer
        (telephone-line-defsegment* my-position-segment
          (if (telephone-line-selected-window-active)
              (if (eq major-mode 'paradox-menu-mode)
                  (telephone-line-trim (format-mode-line mode-line-front-space))
                '(" %3l,%2c "))))

        ;; Ignore some buffers in modeline
        (defvar modeline-ignored-modes nil
          "List of major modes to ignore in modeline")

        (setq modeline-ignored-modes '("Dashboard"
                                      "Warnings"
                                      "Compilation"
                                      "EShell"
                                      "REPL"
                                      "Messages"))

        ;; Display modified status
        (telephone-line-defsegment* my-modified-status-segment
          (if (and (buffer-modified-p) (not (member mode-name modeline-ignored-modes)))
              (propertize "+" 'face `(:foreground "#85b654"))
            ""))

        ;; Display encoding system
        (telephone-line-defsegment* my-coding-segment
          (if (telephone-line-selected-window-active)
              (let* ((code (symbol-name buffer-file-coding-system))
                    (eol-type (coding-system-eol-type buffer-file-coding-system))
                    (eol (cond
                          ((eq 0 eol-type) "unix")
                          ((eq 1 eol-type) "dos")
                          ((eq 2 eol-type) "mac")
                          (t ""))))
                (concat eol " "))))

        ;; Left edge
        (setq telephone-line-lhs
              '((accent . "  ")
                (evil   . (my-evil-segment))
                (nil    . (my-buffer-segment))
                (nil    . (my-modified-status-segment))))

        ;; Right edge
        (setq telephone-line-rhs
              '((nil     . (telephone-line-misc-info-segment))
                (accent  . (my-position-segment))
                (nil     . (my-major-mode-segment))
                (accent  . (my-coding-segment))))

        (telephone-line-mode 1)))

    ;; (use-package doom-themes
    ;;   :after nlinum
    ;;   :init
    ;;   (setq doom-enable-bold nil    ; if nil, bolding are universally disabled
    ;;     doom-enable-italic t  ; if nil, italics are universally disabled

    ;;     ;; doom-one specific settings
    ;;     doom-one-brighter-modeline t
    ;;     doom-one-brighter-comments nil)
    ;;   :config
    ;;   ;; brighter source buffers (that represent files)
    ;;   ;; (add-hook 'find-file-hook 'doom-buffer-mode-maybe)
    ;;   ;; if you use auto-revert-mode
    ;;   ;; (add-hook 'after-revert-hook 'doom-buffer-mode-maybe)
    ;;   ;; you can brighten other buffers (unconditionally) with:
    ;;   ;; (add-hook 'ediff-prepare-buffer-hook 'doom-buffer-mode)

    ;;   ;; brighter minibuffer when active
    ;;   ;; (add-hook 'minibuffer-setup-hook 'doom-brighten-minibuffer)
    ;;   (require 'doom-nlinum))

  #+END_SRC
** Setup
   #+BEGIN_SRC emacs-lisp
     (felipe/setup-ui)
   #+END_SRC
* Misc
** Dumb jump
   #+BEGIN_SRC emacs-lisp
     (use-package dumb-jump
       :config
       (setq dumb-jump-selector 'helm)) 
   #+END_SRC
** Zooming
   #+BEGIN_SRC emacs-lisp
     (use-package default-text-scale)
   #+END_SRC
** Other stuff
   #+BEGIN_SRC emacs-lisp
     (setq mouse-wheel-scroll-amount '(2 ((shift) . 2))) ;; one line at a time
     (setq mouse-wheel-progressive-speed nil) ;; don't accelerate scrolling
     (setq mouse-wheel-follow-mouse 't) ;; scroll window under mouse
     (setq scroll-step 1) ;; keyboard scroll one line at a time

     (setq-default indent-tabs-mode nil)

     (setq show-paren-delay 0)
     (show-paren-mode t)
     (setq show-paren-style 'parenthesis)

     (add-hook 'prog-mode-hook #'hs-minor-mode)

       (setq-default fringes-outside-margins t)


     ;; Stop emacs from making a mess
     (setq auto-save-file-name-transforms
               `((".*" ,(concat user-emacs-directory "auto-save/") t))) 
     (setq backup-directory-alist
           `(("." . ,(expand-file-name
                     (concat user-emacs-directory "backups")))))

     (use-package nlinum
       :config
       (global-nlinum-mode 1)
       (defun nlinum-mode-margin-hook ()
         (when nlinum-mode
           (setq-local nlinum-format "%d ")))
       (add-hook 'nlinum-mode-hook #'nlinum-mode-margin-hook))

     (use-package eyebrowse
       :config
       (eyebrowse-mode t))

     (use-package evil-vimish-fold
       :after evil
       :config
       (evil-vimish-fold-mode 1))

     (use-package shackle
       :init
       (setq helm-display-function 'pop-to-buffer) ; make helm play nice
       (setq shackle-rules '(("\\`\\*helm.*?\\*\\'" :regexp t :align t :size 0.4)))
       (setq shackle-default-rule '(:same t)))

     (use-package exec-path-from-shell
       :config
       (exec-path-from-shell-initialize))

     ;;
     ;; Electric pairs
     ;;
     (electric-pair-mode)
   #+END_SRC
* Evil
  #+BEGIN_SRC emacs-lisp
    (use-package evil
      :init
      (setq evil-shift-width 2)
      :config
      (fset 'evil-visual-update-x-selection 'ignore)
      (evil-mode 1)

      (define-key evil-normal-state-map (kbd "C-h") 'evil-window-left)
        (define-key evil-normal-state-map (kbd "C-j") 'evil-window-down)
        (define-key evil-normal-state-map (kbd "C-k") 'evil-window-up)
        (define-key evil-normal-state-map (kbd "C-l") 'evil-window-right)

      (defun minibuffer-keyboard-quit ()
        "Abort recursive edit.
        In Delete Selection mode, if the mark is active, just deactivate it;
        then it takes a second \\[keyboard-quit] to abort the minibuffer."
        (interactive)
        (if (and delete-selection-mode transient-mark-mode mark-active)
          (setq deactivate-mark  t)
          (when (get-buffer "*Completions*") (delete-windows-on "*Completions*"))
          (abort-recursive-edit)))
      (define-key evil-normal-state-map [escape] 'keyboard-quit)
      (define-key evil-visual-state-map [escape] 'keyboard-quit)
      (define-key minibuffer-local-map [escape] 'minibuffer-keyboard-quit)
      (define-key minibuffer-local-ns-map [escape] 'minibuffer-keyboard-quit)
      (define-key minibuffer-local-completion-map [escape] 'minibuffer-keyboard-quit)
      (define-key minibuffer-local-must-match-map [escape] 'minibuffer-keyboard-quit)
      (define-key minibuffer-local-isearch-map [escape] 'minibuffer-keyboard-quit)
      (global-set-key [escape] 'evil-exit-emacs-state))
  #+END_SRC
** Evil leader
   #+BEGIN_SRC emacs-lisp
     (use-package evil-leader
       :after evil
       :config
       (global-evil-leader-mode)

       ; Overload shifts so that they don't lose the selection
       (define-key evil-visual-state-map (kbd ">") 'felipe/evil-shift-right-visual)
       (define-key evil-visual-state-map (kbd "<") 'felipe/evil-shift-left-visual)
       (define-key evil-visual-state-map [tab] 'felipe/evil-shift-right-visual)
       (define-key evil-visual-state-map [S-tab] 'felipe/evil-shift-left-visual)

       (evil-leader/set-leader felipe/leader-key)) 
   #+END_SRC
** Evil commentary
   #+BEGIN_SRC emacs-lisp
     (use-package evil-commentary
       :after evil
       :config
       (evil-commentary-mode))
   #+END_SRC
** Evil surround
   #+BEGIN_SRC emacs-lisp
     (use-package evil-surround
       :after evil
       :config
       (global-evil-surround-mode 1))
   #+END_SRC
* Projectile
  #+BEGIN_SRC emacs-lisp
  (use-package projectile)

  (use-package helm-projectile
    :after projectile)
  #+END_SRC
* Snippets
  #+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :init
    (setq yas-snippet-dirs
          '("~/.emacs.d/yasnippet-snippets"
            "~/.emacs.d/snippets"))
    :config
    (yas-global-mode 1))
  #+END_SRC
* Flycheck
  #+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :init
    (setq flycheck-highlighting-mode 'symbols)
    (with-eval-after-load 'flycheck
      (setq-default flycheck-disabled-checkers '(emacs-lisp-checkdoc)))
    :config
    (global-flycheck-mode)
    (use-package flycheck-pos-tip
      :config
      (flycheck-pos-tip-mode)))
  #+END_SRC
* Company
  #+BEGIN_SRC emacs-lisp
  (use-package company
    :init
    (setq company-tooltip-align-annotations t)
    :config
    (global-company-mode))
  #+END_SRC
* Git
  #+BEGIN_SRC emacs-lisp
    (use-package magit)
    (use-package evil-magit
      :after magit)
  #+END_SRC
* Languages
** Org
   #+BEGIN_SRC emacs-lisp
     (use-package org
       :config
       (setq org-src-fontify-natively t)
       (setq org-log-done 'time))

     (use-package org-bullets
       :after org
       :init
       (add-hook 'org-mode-hook (lambda ()
                                 (nlinum-mode 0)
                                 (org-bullets-mode 1))))

     (use-package evil-org
       :after org)
   #+END_SRC
** Rust
   #+BEGIN_SRC emacs-lisp
     (use-package rust-mode
       :after evil-leader
       :config

       (use-package racer
         :after company
         :config
         (add-hook 'rust-mode-hook #'racer-mode)
         (add-hook 'racer-mode-hook #'eldoc-mode)
         (add-hook 'racer-mode-hook #'company-mode))

       (use-package flycheck-rust
         :after flycheck
         :config
         (add-hook 'flycheck-mode-hook #'flycheck-rust-setup))

       (define-key rust-mode-map (kbd "TAB") #'company-indent-or-complete-common))

     (use-package cargo
       :after rust-mode
       :config
       (add-hook 'rust-mode-hook 'cargo-minor-mode))
   #+END_SRC
** Python
   #+BEGIN_SRC emacs-lisp
    (use-package elpy
      :config
      (elpy-enable)
      (setq elpy-modules (delete 'elpy-module-highlight-indentation elpy-modules)))
   #+END_SRC
** Lua
   #+BEGIN_SRC emacs-lisp
    (use-package lua-mode
      :after evil-leader
      :init
      (setq lua-indent-level 2)
      :config
      (use-package company-lua
        :after company
        :config
        (add-to-list 'company-backends 'company-lua)))
   #+END_SRC
** Javascript
   #+BEGIN_SRC emacs-lisp
    (use-package js2-mode
      :init
      (setq js2-highlight-level 3)
      :config
      (add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode)))
   #+END_SRC
** C/C++
   #+BEGIN_SRC emacs-lisp
    (use-package irony
      :after evil-leader
      :config
      (add-hook 'c++-mode-hook 'irony-mode)
      (add-hook 'c-mode-hook 'irony-mode)
      (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options)
      (use-package company-irony
        :after company
        :config
        (eval-after-load 'company
          '(add-to-list 'company-backends 'company-irony)))
      (use-package irony-eldoc)
      (use-package clang-format))

    (add-to-list 'auto-mode-alist '("\\.h\\'" . c++-mode))

    (add-hook 'c++-mode-hook (lambda () (setq flycheck-clang-language-standard "c++14")))
   #+END_SRC
** Haskell
   #+BEGIN_SRC emacs-lisp
    (use-package intero
      :config
      (add-hook 'haskell-mode-hook 'intero-mode))
   #+END_SRC
** Emacs lisp
   #+BEGIN_SRC emacs-lisp
    (use-package elisp-format)
   #+END_SRC
** Typescript
   #+BEGIN_SRC emacs-lisp
    (use-package tide
      :after company
      :config
      (defun setup-tide-mode ()
        (interactive)
        (tide-setup))

      ;; formats the buffer before saving
      (add-hook 'before-save-hook 'tide-format-before-save)

      (add-hook 'typescript-mode-hook #'setup-tide-mode))
   #+END_SRC
** Web languages (markup, etc)
   #+BEGIN_SRC emacs-lisp
    (use-package web-mode)
    (use-package pug-mode)
    (use-package scss-mode)
   #+END_SRC
** GLSL
   #+BEGIN_SRC emacs-lisp
    (use-package glsl-mode
      :config
      (add-to-list 'auto-mode-alist '("\\.vsh\\'" . glsl-mode))
      (add-to-list 'auto-mode-alist '("\\.fsh\\'" . glsl-mode))
      (add-to-list 'auto-mode-alist '("\\.glslf\\'" . glsl-mode))
      (add-to-list 'auto-mode-alist '("\\.glslv\\'" . glsl-mode)))
   #+END_SRC
** Go
   #+BEGIN_SRC emacs-lisp
    (use-package go-mode
      :config
      (use-package golint
        :after flycheck)
      (use-package company-go
        :config
        (add-hook 'go-mode-hook (lambda ()
                                  (set (make-local-variable 'company-backends) '(company-go))
                                  (company-mode))))
      (use-package go-eldoc
        :config
        (add-hook 'go-mode-hook 'go-eldoc-setup)))
   #+END_SRC
* Writing
  Provides a distraction free writing mode.
  #+BEGIN_SRC emacs-lisp
    (use-package olivetti)
  #+END_SRC
* Indentation
  #+BEGIN_SRC emacs-lisp
  (add-hook 'rust-mode-hook
    (function (lambda ()
      (setq tab-width 4)
      (setq evil-shift-width 4))))

  (add-hook 'python-mode-hook
    (function (lambda ()
      (setq tab-width 4)
      (setq evil-shift-width 4))))

  (add-hook 'emacs-lisp-mode-hook
    (function (lambda ()
      (setq tab-width 2)
      (setq evil-shift-width 2))))

  (add-hook 'js2-mode-hook
    (function (lambda ()
      (setq js2-basic-offset 2)
      (setq js-indent-level 2)
      (setq evil-shift-width 2))))

  (add-hook 'js-mode-hook
    (function (lambda ()
      (setq js2-basic-offset 2)
      (setq js-indent-level 2)
      (setq evil-shift-width 2))))

  (add-hook 'c++-mode
    (function (lambda ()
      (setq tab-width 2)
      (setq c-basic-offset 2)
      (setq evil-shift-width 2))))

  (add-hook 'lua-mode
    (function (lambda ()
      (setq tab-width 2)
      (setq evil-shift-width 2))))
  #+END_SRC
* Keybinds
** Core bindings
   #+BEGIN_SRC emacs-lisp
     (felipe/name-bind "T" "theme/toggles")
     (felipe/bind "Tt" 'helm-themes "themes")
     (felipe/bind "Tn" 'nlinum-mode "toggle line numbers")

     (felipe/name-bind "z" "zoom")
     (felipe/bind "zz" 'text-scale-adjust "adjust zoom")
     (felipe/bind "zi" 'text-scale-increase "zoom in")
     (felipe/bind "zo" 'text-scale-decrease "zoom out")

     (felipe/name-bind "f" "files")
     (felipe/bind "ff" 'helm-find-files "find file")
     (felipe/bind "fb" 'hs-toggle-hiding "toggle fold")
     (felipe/name-bind "fe" "edit")
     (felipe/bind "fed" 'felipe/edit-config "edit config")
     (felipe/bind "fer" 'felipe/reload-config "reload config")

     (felipe/name-bind "b" "buffer")
     (felipe/bind "bb" 'helm-buffers-list "find buffer")
     (felipe/bind "bd" 'kill-this-buffer "delete buffer")
     (felipe/bind "bn" 'next-buffer "next buffer")
     (felipe/bind "bp" 'previous-buffer "previous buffer")

     (felipe/name-bind "w" "window")
     (felipe/bind "w/" 'split-window-right "split right")
     (felipe/bind "w-" 'split-window-below "split below")
     (felipe/bind "wd" 'delete-window "delete window")

     (felipe/name-bind "e" "error")
     (felipe/bind "en" 'flycheck-next-error "next error")
     (felipe/bind "ep" 'flycheck-previous-error "previous error")

     (felipe/name-bind "p" "projectile")
     (felipe/bind "pp" 'helm-projectile-switch-project "switch project")
     (felipe/bind "pf" 'helm-projectile-find-file "find file")

     (felipe/name-bind "m" "major mode")
     (felipe/name-bind "mg" "go")
     (felipe/bind "mgg" 'dumb-jump-go "goto def")
     (felipe/bind "mgG" 'dumb-jump-go-other-window "goto def in other window")

     (felipe/name-bind "g" "git")
     (felipe/bind "gg" 'magit-status "status")
     (felipe/bind "gc" 'magit-commit "commit")
     (felipe/bind "gp" 'magit-push "push")
     (felipe/bind "gs" 'magit-stage "stage")
     (felipe/bind "gU" 'magit-unstage "unstage")
   #+END_SRC
** Make helm evil-friendly
   #+BEGIN_SRC emacs-lisp
     (define-key helm-map (kbd "C-j") 'helm-next-line)
     (define-key helm-map (kbd "C-k") 'helm-previous-line)
   #+END_SRC
** Rust
   #+BEGIN_SRC emacs-lisp
     (felipe/bind-mode "mb" 'cargo-process-build "Cargo build" 'rust-mode)
     (felipe/bind-mode "mr" 'cargo-process-run "Cargo run" 'rust-mode)
     (felipe/bind-mode "mf" 'rust-format-buffer "Format" 'rust-mode)
   #+END_SRC
** Lua
   #+BEGIN_SRC emacs-lisp
     (felipe/bind-mode "mr" '(lambda ()
                    (interactive)
                    (let ((app-root (locate-dominating-file (buffer-file-name) "main.lua")))
                      (shell-command (format "love %s &" app-root))))
                       "Run love game" 'lua-mode)
   #+END_SRC
** C/C++
   #+BEGIN_SRC emacs-lisp
     (felipe/bind-mode "mf" 'clang-format-buffer "Format" 'c++-mode)
     (felipe/bind-mode "ms" 'ff-find-other-file "Switch file" 'c++-mode)
   #+END_SRC
** Typescript
   #+BEGIN_SRC emacs-lisp
     (felipe/bind-mode "mf" 'tide-format "Format" 'typescript-mode)
     (felipe/bind-mode "mg" 'tide-goto-reference "Go to reference" 'typescript-mode)
   #+END_SRC
** Go
   #+BEGIN_SRC emacs-lisp
     (felipe/bind-mode "mf" 'gofmt "Format" 'go-mode)
     (felipe/bind-mode "mi" 'go-import-add "Add imports" 'go-mode)
   #+END_SRC
